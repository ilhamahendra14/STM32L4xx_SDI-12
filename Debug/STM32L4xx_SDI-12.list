
STM32L4xx_SDI-12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800474c  0800474c  0001474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800492c  0800492c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800492c  0800492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004934  08004934  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800493c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  080049ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080049ac  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f548  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022cf  00000000  00000000  0002f5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  000318b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00032518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000219ca  00000000  00000000  00033090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed4a  00000000  00000000  00054a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8067  00000000  00000000  000637a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b80b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038bc  00000000  00000000  0012b85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004734 	.word	0x08004734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004734 	.word	0x08004734

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b09c      	sub	sp, #112	; 0x70
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fd62 	bl	8001052 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f841 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f943 	bl	800081c <MX_GPIO_Init>
  MX_RNG_Init();
 8000596:	f000 f895 	bl	80006c4 <MX_RNG_Init>
  MX_RTC_Init();
 800059a:	f000 f8a7 	bl	80006ec <MX_RTC_Init>
  MX_USART2_UART_Init();
 800059e:	f000 f901 	bl	80007a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SDI12_Init(&huart2);
 80005a2:	481a      	ldr	r0, [pc, #104]	; (800060c <main+0x88>)
 80005a4:	f000 f9a2 	bl	80008ec <SDI12_Init>
  HAL_GPIO_WritePin(StepUp_GPIO_Port, StepUp_Pin, SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2120      	movs	r1, #32
 80005ac:	4818      	ldr	r0, [pc, #96]	; (8000610 <main+0x8c>)
 80005ae:	f001 f865 	bl	800167c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2110      	movs	r1, #16
 80005b6:	4816      	ldr	r0, [pc, #88]	; (8000610 <main+0x8c>)
 80005b8:	f001 f860 	bl	800167c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2102      	movs	r1, #2
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f001 f85a 	bl	800167c <HAL_GPIO_WritePin>
  char data[100];
  char addr = '0';
 80005c8:	2330      	movs	r3, #48	; 0x30
 80005ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	memset(data, 0, sizeof(data));
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	2264      	movs	r2, #100	; 0x64
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fab2 	bl	8003b40 <memset>
	SDI12_StartMeasurement(addr, &measurement_info);
 80005dc:	463a      	mov	r2, r7
 80005de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80005e2:	4611      	mov	r1, r2
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fa9b 	bl	8000b20 <SDI12_StartMeasurement>
	HAL_Delay(500);
 80005ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ee:	f000 fda5 	bl	800113c <HAL_Delay>
	SDI12_SendData(addr, &measurement_info, data);
 80005f2:	f107 0208 	add.w	r2, r7, #8
 80005f6:	4639      	mov	r1, r7
 80005f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fae3 	bl	8000bc8 <SDI12_SendData>
	HAL_Delay(3000);
 8000602:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000606:	f000 fd99 	bl	800113c <HAL_Delay>
	memset(data, 0, sizeof(data));
 800060a:	e7e0      	b.n	80005ce <main+0x4a>
 800060c:	200000c0 	.word	0x200000c0
 8000610:	48000400 	.word	0x48000400

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b096      	sub	sp, #88	; 0x58
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	2244      	movs	r2, #68	; 0x44
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fa8c 	bl	8003b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	463b      	mov	r3, r7
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000636:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063a:	f001 f855 	bl	80016e8 <HAL_PWREx_ControlVoltageScaling>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000644:	f000 f94c 	bl	80008e0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000648:	f001 f830 	bl	80016ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <SystemClock_Config+0xac>)
 800064e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000652:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <SystemClock_Config+0xac>)
 8000654:	f023 0318 	bic.w	r3, r3, #24
 8000658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800065c:	2314      	movs	r3, #20
 800065e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f88b 	bl	8001794 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000684:	f000 f92c 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000694:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fc8a 	bl	8001fbc <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ae:	f000 f917 	bl	80008e0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006b2:	f002 f89d 	bl	80027f0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b6:	bf00      	nop
 80006b8:	3758      	adds	r7, #88	; 0x58
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_RNG_Init+0x20>)
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <MX_RNG_Init+0x24>)
 80006cc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_RNG_Init+0x20>)
 80006d0:	f002 f990 	bl	80029f4 <HAL_RNG_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80006da:	f000 f901 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	50060800 	.word	0x50060800

080006ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000704:	4b25      	ldr	r3, [pc, #148]	; (800079c <MX_RTC_Init+0xb0>)
 8000706:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <MX_RTC_Init+0xb4>)
 8000708:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_RTC_Init+0xb0>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <MX_RTC_Init+0xb0>)
 8000712:	227f      	movs	r2, #127	; 0x7f
 8000714:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_RTC_Init+0xb0>)
 8000718:	22ff      	movs	r2, #255	; 0xff
 800071a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_RTC_Init+0xb0>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000722:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_RTC_Init+0xb0>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000728:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_RTC_Init+0xb0>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_RTC_Init+0xb0>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000734:	4819      	ldr	r0, [pc, #100]	; (800079c <MX_RTC_Init+0xb0>)
 8000736:	f002 f9b4 	bl	8002aa2 <HAL_RTC_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000740:	f000 f8ce 	bl	80008e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000744:	2300      	movs	r3, #0
 8000746:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000748:	2300      	movs	r3, #0
 800074a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800074c:	2300      	movs	r3, #0
 800074e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	480f      	ldr	r0, [pc, #60]	; (800079c <MX_RTC_Init+0xb0>)
 8000760:	f002 fa1a 	bl	8002b98 <HAL_RTC_SetTime>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800076a:	f000 f8b9 	bl	80008e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800076e:	2301      	movs	r3, #1
 8000770:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000772:	2301      	movs	r3, #1
 8000774:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000776:	2301      	movs	r3, #1
 8000778:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800077a:	2300      	movs	r3, #0
 800077c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	2201      	movs	r2, #1
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_RTC_Init+0xb0>)
 8000786:	f002 faa4 	bl	8002cd2 <HAL_RTC_SetDate>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000790:	f000 f8a6 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000009c 	.word	0x2000009c
 80007a0:	40002800 	.word	0x40002800

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_USART2_UART_Init+0x70>)
 80007aa:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_USART2_UART_Init+0x74>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1200;
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_USART2_UART_Init+0x70>)
 80007b0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_USART2_UART_Init+0x70>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_USART2_UART_Init+0x70>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USART2_UART_Init+0x70>)
 80007c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_USART2_UART_Init+0x70>)
 80007cc:	220c      	movs	r2, #12
 80007ce:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d0:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_USART2_UART_Init+0x70>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_USART2_UART_Init+0x70>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_USART2_UART_Init+0x70>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART2_UART_Init+0x70>)
 80007e4:	220b      	movs	r2, #11
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
                              |UART_ADVFEATURE_SWAP_INIT;
  huart2.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_USART2_UART_Init+0x70>)
 80007ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART2_UART_Init+0x70>)
 80007f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART2_UART_Init+0x70>)
 80007fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_USART2_UART_Init+0x70>)
 8000802:	f002 fbd5 	bl	8002fb0 <HAL_UART_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 800080c:	f000 f868 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000c0 	.word	0x200000c0
 8000818:	40004400 	.word	0x40004400

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_GPIO_Init+0xbc>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a28      	ldr	r2, [pc, #160]	; (80008d8 <MX_GPIO_Init+0xbc>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_GPIO_Init+0xbc>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_GPIO_Init+0xbc>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a22      	ldr	r2, [pc, #136]	; (80008d8 <MX_GPIO_Init+0xbc>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_GPIO_Init+0xbc>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_GPIO_Init+0xbc>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_GPIO_Init+0xbc>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_GPIO_Init+0xbc>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A1_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f000 fefa 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B4_Pin|StepUp_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2130      	movs	r1, #48	; 0x30
 800088c:	4813      	ldr	r0, [pc, #76]	; (80008dc <MX_GPIO_Init+0xc0>)
 800088e:	f000 fef5 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A1_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = A1_Pin|Buzzer_Pin;
 8000892:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ae:	f000 fd7b 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B4_Pin StepUp_Pin */
  GPIO_InitStruct.Pin = B4_Pin|StepUp_Pin;
 80008b2:	2330      	movs	r3, #48	; 0x30
 80008b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4619      	mov	r1, r3
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0xc0>)
 80008ca:	f000 fd6d 	bl	80013a8 <HAL_GPIO_Init>

}
 80008ce:	bf00      	nop
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48000400 	.word	0x48000400

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <SDI12_Init>:
static HAL_StatusTypeDef SDI12_ReceiveLine(char buffer[], const uint8_t max, uint8_t *const count);

/*
 * Initialise with UART, TX Pin and TX Pin GPIO Port.
 */
void SDI12_Init(UART_HandleTypeDef *huart) {
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    sdi12.Huart = huart;
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <SDI12_Init+0x28>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
    sdi12.Pin = SDI12_COM_Pin;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <SDI12_Init+0x28>)
 80008fc:	2204      	movs	r2, #4
 80008fe:	605a      	str	r2, [r3, #4]
    sdi12.Port = SDI12_COM_GPIO_Port;
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <SDI12_Init+0x28>)
 8000902:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000906:	609a      	str	r2, [r3, #8]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	20000144 	.word	0x20000144

08000918 <SDI12_QueryDevice>:
 *
 *
 * Uses a single UART pin (TX) and cycles between TX and RX to
 * send and receive commands (respectively).
 */
static HAL_StatusTypeDef SDI12_QueryDevice(const char cmd[], const uint8_t cmd_len, char response[], const uint8_t response_len) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	; 0x30
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	461a      	mov	r2, r3
 8000924:	460b      	mov	r3, r1
 8000926:	72fb      	strb	r3, [r7, #11]
 8000928:	4613      	mov	r3, r2
 800092a:	72bb      	strb	r3, [r7, #10]

    // Setup GPIO pin for break
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800092c:	f107 0318 	add.w	r3, r7, #24
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = sdi12.Pin;
 800093c:	4b3b      	ldr	r3, [pc, #236]	; (8000a2c <SDI12_QueryDevice+0x114>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(sdi12.Port, &GPIO_InitStruct);
 800094e:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <SDI12_QueryDevice+0x114>)
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	f107 0218 	add.w	r2, r7, #24
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f000 fd25 	bl	80013a8 <HAL_GPIO_Init>

    // Break must be >= 12 ms
    HAL_GPIO_WritePin(sdi12.Port, (uint16_t) sdi12.Pin, GPIO_PIN_SET);
 800095e:	4b33      	ldr	r3, [pc, #204]	; (8000a2c <SDI12_QueryDevice+0x114>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	4a32      	ldr	r2, [pc, #200]	; (8000a2c <SDI12_QueryDevice+0x114>)
 8000964:	6852      	ldr	r2, [r2, #4]
 8000966:	b291      	uxth	r1, r2
 8000968:	2201      	movs	r2, #1
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fe86 	bl	800167c <HAL_GPIO_WritePin>
    HAL_Delay(12);
 8000970:	200c      	movs	r0, #12
 8000972:	f000 fbe3 	bl	800113c <HAL_Delay>

    // Marking must be >= 8.3 ms
    HAL_GPIO_WritePin(sdi12.Port, (uint16_t) sdi12.Pin, GPIO_PIN_RESET);
 8000976:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <SDI12_QueryDevice+0x114>)
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	4a2c      	ldr	r2, [pc, #176]	; (8000a2c <SDI12_QueryDevice+0x114>)
 800097c:	6852      	ldr	r2, [r2, #4]
 800097e:	b291      	uxth	r1, r2
 8000980:	2200      	movs	r2, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fe7a 	bl	800167c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF_USART2;
 800098c:	2307      	movs	r3, #7
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(sdi12.Port, &GPIO_InitStruct);
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <SDI12_QueryDevice+0x114>)
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	f107 0218 	add.w	r2, r7, #24
 8000998:	4611      	mov	r1, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fd04 	bl	80013a8 <HAL_GPIO_Init>
    HAL_Delay(9);
 80009a0:	2009      	movs	r0, #9
 80009a2:	f000 fbcb 	bl	800113c <HAL_Delay>

    HAL_StatusTypeDef res;

    // Put TX on the SDI-12 data pin so a command can be sent. This seems to be
    // the minimum amount of code required for the swap to happen.
    __HAL_UART_DISABLE(sdi12.Huart);
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <SDI12_QueryDevice+0x114>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <SDI12_QueryDevice+0x114>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f022 0201 	bic.w	r2, r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(sdi12.Huart->Instance->CR2, USART_CR2_SWAP, UART_ADVFEATURE_SWAP_DISABLE);
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <SDI12_QueryDevice+0x114>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <SDI12_QueryDevice+0x114>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80009cc:	605a      	str	r2, [r3, #4]
    __HAL_UART_ENABLE(sdi12.Huart);
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <SDI12_QueryDevice+0x114>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <SDI12_QueryDevice+0x114>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f042 0201 	orr.w	r2, r2, #1
 80009e0:	601a      	str	r2, [r3, #0]

    // Transmit
    res = HAL_UART_Transmit(sdi12.Huart, (uint8_t*) cmd, cmd_len, 1000);
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <SDI12_QueryDevice+0x114>)
 80009e4:	6818      	ldr	r0, [r3, #0]
 80009e6:	7afb      	ldrb	r3, [r7, #11]
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ee:	68f9      	ldr	r1, [r7, #12]
 80009f0:	f002 fb2c 	bl	800304c <HAL_UART_Transmit>
 80009f4:	4603      	mov	r3, r0
 80009f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (res != HAL_OK) {
 80009fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <SDI12_QueryDevice+0xf0>
        return res;
 8000a02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a06:	e00d      	b.n	8000a24 <SDI12_QueryDevice+0x10c>
    }

    uint8_t count = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	75fb      	strb	r3, [r7, #23]
    res = SDI12_ReceiveLine(response, response_len, &count);
 8000a0c:	f107 0217 	add.w	r2, r7, #23
 8000a10:	7abb      	ldrb	r3, [r7, #10]
 8000a12:	4619      	mov	r1, r3
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f80b 	bl	8000a30 <SDI12_ReceiveLine>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    return res;
 8000a20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3730      	adds	r7, #48	; 0x30
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000144 	.word	0x20000144

08000a30 <SDI12_ReceiveLine>:
 * max - the maximum number of characters to receive - ie the size of buffer.
 * count - the number of characters received is written to count.
 *
 * HAL_ERROR or HAL_TIMEOUT may be returned, otherwise HAL_OK.
 */
static HAL_StatusTypeDef SDI12_ReceiveLine(char buffer[], const uint8_t max, uint8_t *const count) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	72fb      	strb	r3, [r7, #11]
    if (buffer == 0 || max == 0 || count == 0) {
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d005      	beq.n	8000a50 <SDI12_ReceiveLine+0x20>
 8000a44:	7afb      	ldrb	r3, [r7, #11]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <SDI12_ReceiveLine+0x20>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <SDI12_ReceiveLine+0x24>
        return HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e05f      	b.n	8000b14 <SDI12_ReceiveLine+0xe4>
    }

    // Put the SDI-12 pin into RX mode so the sensor response can be read.
    __HAL_UART_DISABLE(sdi12.Huart);
 8000a54:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <SDI12_ReceiveLine+0xec>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <SDI12_ReceiveLine+0xec>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f022 0201 	bic.w	r2, r2, #1
 8000a66:	601a      	str	r2, [r3, #0]
    MODIFY_REG(sdi12.Huart->Instance->CR2, USART_CR2_SWAP, UART_ADVFEATURE_SWAP_ENABLE);
 8000a68:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <SDI12_ReceiveLine+0xec>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <SDI12_ReceiveLine+0xec>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a7a:	605a      	str	r2, [r3, #4]
    __HAL_UART_ENABLE(sdi12.Huart);
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <SDI12_ReceiveLine+0xec>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <SDI12_ReceiveLine+0xec>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f042 0201 	orr.w	r2, r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]

    // Receive up to max chars, break on CR/LF pair.
    HAL_StatusTypeDef res = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	75fb      	strb	r3, [r7, #23]
    uint8_t i = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	75bb      	strb	r3, [r7, #22]
    uint8_t c;
    while (i < max) {
 8000a98:	e017      	b.n	8000aca <SDI12_ReceiveLine+0x9a>
        // Wait for up to 100ms for each character before timing out. This is to
        // handle waiting for the first character after a command has been sent,
        // where you are meant to have 3 retries with the last being after 100ms.
        res = HAL_UART_Receive(sdi12.Huart, &c, 1, 110);
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <SDI12_ReceiveLine+0xec>)
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	f107 0115 	add.w	r1, r7, #21
 8000aa2:	236e      	movs	r3, #110	; 0x6e
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f002 fb65 	bl	8003174 <HAL_UART_Receive>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	75fb      	strb	r3, [r7, #23]
        if (res == HAL_TIMEOUT) {
 8000aae:	7dfb      	ldrb	r3, [r7, #23]
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d00f      	beq.n	8000ad4 <SDI12_ReceiveLine+0xa4>
            break;
        }

        buffer[i++] = c;
 8000ab4:	7dbb      	ldrb	r3, [r7, #22]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	75ba      	strb	r2, [r7, #22]
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4413      	add	r3, r2
 8000ac0:	7d7a      	ldrb	r2, [r7, #21]
 8000ac2:	701a      	strb	r2, [r3, #0]
        if (c == 0x0a) {
 8000ac4:	7d7b      	ldrb	r3, [r7, #21]
 8000ac6:	2b0a      	cmp	r3, #10
 8000ac8:	d006      	beq.n	8000ad8 <SDI12_ReceiveLine+0xa8>
    while (i < max) {
 8000aca:	7dba      	ldrb	r2, [r7, #22]
 8000acc:	7afb      	ldrb	r3, [r7, #11]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d3e3      	bcc.n	8000a9a <SDI12_ReceiveLine+0x6a>
 8000ad2:	e018      	b.n	8000b06 <SDI12_ReceiveLine+0xd6>
            break;
 8000ad4:	bf00      	nop
 8000ad6:	e016      	b.n	8000b06 <SDI12_ReceiveLine+0xd6>
            break;
 8000ad8:	bf00      	nop
        }
    }

    while (i > 0) {
 8000ada:	e014      	b.n	8000b06 <SDI12_ReceiveLine+0xd6>
        c = buffer[i - 1];
 8000adc:	7dbb      	ldrb	r3, [r7, #22]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	757b      	strb	r3, [r7, #21]
        if (c == 0x0a || c == 0x0d) {
 8000ae8:	7d7b      	ldrb	r3, [r7, #21]
 8000aea:	2b0a      	cmp	r3, #10
 8000aec:	d002      	beq.n	8000af4 <SDI12_ReceiveLine+0xc4>
 8000aee:	7d7b      	ldrb	r3, [r7, #21]
 8000af0:	2b0d      	cmp	r3, #13
 8000af2:	d10b      	bne.n	8000b0c <SDI12_ReceiveLine+0xdc>
            buffer[i - 1] = 0;
 8000af4:	7dbb      	ldrb	r3, [r7, #22]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
            i--;
 8000b00:	7dbb      	ldrb	r3, [r7, #22]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	75bb      	strb	r3, [r7, #22]
    while (i > 0) {
 8000b06:	7dbb      	ldrb	r3, [r7, #22]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1e7      	bne.n	8000adc <SDI12_ReceiveLine+0xac>
        } else {
            break;
        }
    }

    *count = i;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7dba      	ldrb	r2, [r7, #22]
 8000b10:	701a      	strb	r2, [r3, #0]
    return res;
 8000b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000144 	.word	0x20000144

08000b20 <SDI12_StartMeasurement>:
 * To get data the user must call the send data command (D0!). -> SDI12_SendData(...)
 * Expected response {'0', '0', '0', '1', '3', '\r', '\n'}
 * Expected response as = atttn -> address (a), 3 numbers representing processing time (t)
 * and n results (n).
 */
HAL_StatusTypeDef SDI12_StartMeasurement(const char addr, SDI12_Measure_TypeDef *measurement_info) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
    char cmd[4] = { addr, 'M', '!', 0x00 };
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	763b      	strb	r3, [r7, #24]
 8000b30:	234d      	movs	r3, #77	; 0x4d
 8000b32:	767b      	strb	r3, [r7, #25]
 8000b34:	2321      	movs	r3, #33	; 0x21
 8000b36:	76bb      	strb	r3, [r7, #26]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	76fb      	strb	r3, [r7, #27]
    char response[7] = { 0 };
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2100      	movs	r1, #0
 8000b46:	460a      	mov	r2, r1
 8000b48:	801a      	strh	r2, [r3, #0]
 8000b4a:	460a      	mov	r2, r1
 8000b4c:	709a      	strb	r2, [r3, #2]
    HAL_StatusTypeDef result = SDI12_QueryDevice(cmd, 3, response, 7);
 8000b4e:	f107 0210 	add.w	r2, r7, #16
 8000b52:	f107 0018 	add.w	r0, r7, #24
 8000b56:	2307      	movs	r3, #7
 8000b58:	2103      	movs	r1, #3
 8000b5a:	f7ff fedd 	bl	8000918 <SDI12_QueryDevice>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	77bb      	strb	r3, [r7, #30]

    // Check for valid response
    if (response[0] != '\0') {
 8000b62:	7c3b      	ldrb	r3, [r7, #16]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d027      	beq.n	8000bb8 <SDI12_StartMeasurement+0x98>
        // Address of queried device (a)
        measurement_info->Address = response[0];
 8000b68:	7c3a      	ldrb	r2, [r7, #16]
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	701a      	strb	r2, [r3, #0]

        // Extract time from response to be converted to uint16_t
        char time_buf[3];
        for (uint8_t i = 1; i < 4; i++) {
 8000b6e:	2301      	movs	r3, #1
 8000b70:	77fb      	strb	r3, [r7, #31]
 8000b72:	e00d      	b.n	8000b90 <SDI12_StartMeasurement+0x70>
            time_buf[i - 1] = response[i];
 8000b74:	7ffa      	ldrb	r2, [r7, #31]
 8000b76:	7ffb      	ldrb	r3, [r7, #31]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	3220      	adds	r2, #32
 8000b7c:	443a      	add	r2, r7
 8000b7e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8000b82:	3320      	adds	r3, #32
 8000b84:	443b      	add	r3, r7
 8000b86:	f803 2c14 	strb.w	r2, [r3, #-20]
        for (uint8_t i = 1; i < 4; i++) {
 8000b8a:	7ffb      	ldrb	r3, [r7, #31]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	77fb      	strb	r3, [r7, #31]
 8000b90:	7ffb      	ldrb	r3, [r7, #31]
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	d9ee      	bls.n	8000b74 <SDI12_StartMeasurement+0x54>
        }

        // Convert time_buf (ttt) into uint16_t
        uint16_t time;
        measurement_info->Time = sscanf(time_buf, "%hd", &time);
 8000b96:	f107 020a 	add.w	r2, r7, #10
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4909      	ldr	r1, [pc, #36]	; (8000bc4 <SDI12_StartMeasurement+0xa4>)
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f002 ffd5 	bl	8003b50 <siscanf>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	805a      	strh	r2, [r3, #2]

        // Number of values to expect in measurement (n)
        measurement_info->NumValues = response[4] - '0'; // char to uint8_t
 8000bae:	7d3b      	ldrb	r3, [r7, #20]
 8000bb0:	3b30      	subs	r3, #48	; 0x30
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	711a      	strb	r2, [r3, #4]
    };

    return result;
 8000bb8:	7fbb      	ldrb	r3, [r7, #30]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3720      	adds	r7, #32
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	08004754 	.word	0x08004754

08000bc8 <SDI12_SendData>:
 * command. Called until the number of measurements (obtained in a M command)
 * are received.
 * The populated array (data) should have sufficient size to hold all values
 * returned from the sensor (approx upto 10 * 75 = 750).
 */
HAL_StatusTypeDef SDI12_SendData(const char addr, const SDI12_Measure_TypeDef *measurement_info, char *data) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b09a      	sub	sp, #104	; 0x68
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	73fb      	strb	r3, [r7, #15]

    uint16_t index = 0; // Holds position in data array
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    uint8_t n_values = 0; // Holds index of number of values received
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

    // Loop through until all the data has been captured (matching NumValues)
    char cmd[] = { addr, 'D', 0, '!', 0x00 };
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8000be8:	2344      	movs	r3, #68	; 0x44
 8000bea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8000bf4:	2321      	movs	r3, #33	; 0x21
 8000bf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
    for (char i = '0'; i < '9'; i++) {
 8000c00:	2330      	movs	r3, #48	; 0x30
 8000c02:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8000c06:	e07d      	b.n	8000d04 <SDI12_SendData+0x13c>
        cmd[2] = i;
 8000c08:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000c0c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        char response[MAX_RESPONSE_SIZE + 1] = { 0 };
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2248      	movs	r2, #72	; 0x48
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f002 ff8f 	bl	8003b40 <memset>
        HAL_StatusTypeDef result = SDI12_QueryDevice(cmd, 4, response,
 8000c22:	f107 0210 	add.w	r2, r7, #16
 8000c26:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8000c2a:	234b      	movs	r3, #75	; 0x4b
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	f7ff fe73 	bl	8000918 <SDI12_QueryDevice>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
        MAX_RESPONSE_SIZE);
        if (result != HAL_OK) {
 8000c38:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <SDI12_SendData+0x7e>
            return result;
 8000c40:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000c44:	e064      	b.n	8000d10 <SDI12_SendData+0x148>
        }

        uint8_t res_index = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        for (uint8_t x = 1; x < MAX_RESPONSE_SIZE; x++) {
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8000c52:	e026      	b.n	8000ca2 <SDI12_SendData+0xda>
            // Total number of + and - should equal measurement_info->NumValues if all values have been received
            if (response[x] == '+' || response[x] == '-') {
 8000c54:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8000c58:	3368      	adds	r3, #104	; 0x68
 8000c5a:	443b      	add	r3, r7
 8000c5c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000c60:	2b2b      	cmp	r3, #43	; 0x2b
 8000c62:	d007      	beq.n	8000c74 <SDI12_SendData+0xac>
 8000c64:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000c70:	2b2d      	cmp	r3, #45	; 0x2d
 8000c72:	d104      	bne.n	8000c7e <SDI12_SendData+0xb6>
                n_values++;
 8000c74:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000c78:	3301      	adds	r3, #1
 8000c7a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            }
            // No need to go search beyond received data
            if (response[x] == '\0') {
 8000c7e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8000c82:	3368      	adds	r3, #104	; 0x68
 8000c84:	443b      	add	r3, r7
 8000c86:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00e      	beq.n	8000cac <SDI12_SendData+0xe4>
                break;
            }

            res_index++;
 8000c8e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000c92:	3301      	adds	r3, #1
 8000c94:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        for (uint8_t x = 1; x < MAX_RESPONSE_SIZE; x++) {
 8000c98:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8000ca2:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8000ca6:	2b4a      	cmp	r3, #74	; 0x4a
 8000ca8:	d9d4      	bls.n	8000c54 <SDI12_SendData+0x8c>
 8000caa:	e000      	b.n	8000cae <SDI12_SendData+0xe6>
                break;
 8000cac:	bf00      	nop
        }

        if (res_index > 0) {
 8000cae:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d019      	beq.n	8000cea <SDI12_SendData+0x122>
            memcpy(&data[index], &response[1], res_index);
 8000cb6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	18d0      	adds	r0, r2, r3
 8000cbe:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f002 ff2b 	bl	8003b24 <memcpy>
            index += res_index;
 8000cce:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000cd8:	4413      	add	r3, r2
 8000cda:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
            data[index] = 0;
 8000cde:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
        }

        // All values received
        if (n_values == measurement_info->NumValues) {
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	791b      	ldrb	r3, [r3, #4]
 8000cee:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d101      	bne.n	8000cfa <SDI12_SendData+0x132>
            return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e00a      	b.n	8000d10 <SDI12_SendData+0x148>
    for (char i = '0'; i < '9'; i++) {
 8000cfa:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000cfe:	3301      	adds	r3, #1
 8000d00:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8000d04:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000d08:	2b38      	cmp	r3, #56	; 0x38
 8000d0a:	f67f af7d 	bls.w	8000c08 <SDI12_SendData+0x40>
        }
    }

    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3768      	adds	r7, #104	; 0x68
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x44>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x44>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x44>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x44>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x44>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6593      	str	r3, [r2, #88]	; 0x58
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x44>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b098      	sub	sp, #96	; 0x60
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2254      	movs	r2, #84	; 0x54
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fee5 	bl	8003b40 <memset>
  if(hrng->Instance==RNG)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <HAL_RNG_MspInit+0x80>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d12a      	bne.n	8000dd6 <HAL_RNG_MspInit+0x76>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000d80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d84:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000d86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d8a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d94:	2308      	movs	r3, #8
 8000d96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000da4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fb28 	bl	8002404 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_RNG_MspInit+0x5e>
    {
      Error_Handler();
 8000dba:	f7ff fd91 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_RNG_MspInit+0x84>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_RNG_MspInit+0x84>)
 8000dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_RNG_MspInit+0x84>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3760      	adds	r7, #96	; 0x60
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	50060800 	.word	0x50060800
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b098      	sub	sp, #96	; 0x60
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2254      	movs	r2, #84	; 0x54
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 fea1 	bl	8003b40 <memset>
  if(hrtc->Instance==RTC)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a13      	ldr	r2, [pc, #76]	; (8000e50 <HAL_RTC_MspInit+0x68>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d11f      	bne.n	8000e48 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e12:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 faf3 	bl	8002404 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000e24:	f7ff fd5c 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_RTC_MspInit+0x6c>)
 8000e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <HAL_RTC_MspInit+0x6c>)
 8000e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 fa7c 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000e42:	2003      	movs	r0, #3
 8000e44:	f000 fa95 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3760      	adds	r7, #96	; 0x60
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40002800 	.word	0x40002800
 8000e54:	40021000 	.word	0x40021000

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b09e      	sub	sp, #120	; 0x78
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	2254      	movs	r2, #84	; 0x54
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fe61 	bl	8003b40 <memset>
  if(huart->Instance==USART2)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <HAL_UART_MspInit+0xa8>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d136      	bne.n	8000ef6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fab5 	bl	8002404 <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea0:	f7ff fd1e 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_UART_MspInit+0xac>)
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea8:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <HAL_UART_MspInit+0xac>)
 8000eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eae:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_UART_MspInit+0xac>)
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_UART_MspInit+0xac>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <HAL_UART_MspInit+0xac>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_UART_MspInit+0xac>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = SDI12_COM_Pin|GPIO_PIN_3;
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee4:	2307      	movs	r3, #7
 8000ee6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000eec:	4619      	mov	r1, r3
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f000 fa59 	bl	80013a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3778      	adds	r7, #120	; 0x78
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40004400 	.word	0x40004400
 8000f04:	40021000 	.word	0x40021000

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f54:	f000 f8d2 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <RTC_WKUP_IRQHandler+0x10>)
 8000f62:	f001 fff5 	bl	8002f50 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000009c 	.word	0x2000009c

08000f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f78:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <_sbrk+0x5c>)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <_sbrk+0x60>)
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <_sbrk+0x64>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <_sbrk+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa0:	f002 fd96 	bl	8003ad0 <__errno>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	e009      	b.n	8000fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <_sbrk+0x64>)
 8000fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20010000 	.word	0x20010000
 8000fd0:	00000400 	.word	0x00000400
 8000fd4:	20000150 	.word	0x20000150
 8000fd8:	20000168 	.word	0x20000168

08000fdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001004:	f7ff ffea 	bl	8000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <LoopForever+0x6>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	; (8001040 <LoopForever+0xa>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <LoopForever+0xe>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	; (800104c <LoopForever+0x16>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f002 fd55 	bl	8003adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001032:	f7ff faa7 	bl	8000584 <main>

08001036 <LoopForever>:

LoopForever:
    b LoopForever
 8001036:	e7fe      	b.n	8001036 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001038:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001044:	0800493c 	.word	0x0800493c
  ldr r2, =_sbss
 8001048:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800104c:	20000168 	.word	0x20000168

08001050 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_IRQHandler>

08001052 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f961 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001062:	200f      	movs	r0, #15
 8001064:	f000 f80e 	bl	8001084 <HAL_InitTick>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	e001      	b.n	8001078 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001074:	f7ff fe50 	bl	8000d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001078:	79fb      	ldrb	r3, [r7, #7]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_InitTick+0x6c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d023      	beq.n	80010e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_InitTick+0x70>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_InitTick+0x6c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f96d 	bl	800138e <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10f      	bne.n	80010da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d809      	bhi.n	80010d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 f937 	bl	800133a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_InitTick+0x74>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e007      	b.n	80010e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e004      	b.n	80010e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e001      	b.n	80010e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008
 8001120:	20000154 	.word	0x20000154

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000154 	.word	0x20000154

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffde 	bl	8001124 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff29 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff3e 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff31 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffa2 	bl	80012e0 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b6:	e148      	b.n	800164a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	2101      	movs	r1, #1
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	fa01 f303 	lsl.w	r3, r1, r3
 80013c4:	4013      	ands	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 813a 	beq.w	8001644 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d005      	beq.n	80013e8 <HAL_GPIO_Init+0x40>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d130      	bne.n	800144a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800141e:	2201      	movs	r2, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	f003 0201 	and.w	r2, r3, #1
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b03      	cmp	r3, #3
 8001454:	d017      	beq.n	8001486 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d123      	bne.n	80014da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	691a      	ldr	r2, [r3, #16]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	08da      	lsrs	r2, r3, #3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3208      	adds	r2, #8
 80014d4:	6939      	ldr	r1, [r7, #16]
 80014d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0203 	and.w	r2, r3, #3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8094 	beq.w	8001644 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151c:	4b52      	ldr	r3, [pc, #328]	; (8001668 <HAL_GPIO_Init+0x2c0>)
 800151e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001520:	4a51      	ldr	r2, [pc, #324]	; (8001668 <HAL_GPIO_Init+0x2c0>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6613      	str	r3, [r2, #96]	; 0x60
 8001528:	4b4f      	ldr	r3, [pc, #316]	; (8001668 <HAL_GPIO_Init+0x2c0>)
 800152a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001534:	4a4d      	ldr	r2, [pc, #308]	; (800166c <HAL_GPIO_Init+0x2c4>)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800155e:	d00d      	beq.n	800157c <HAL_GPIO_Init+0x1d4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a43      	ldr	r2, [pc, #268]	; (8001670 <HAL_GPIO_Init+0x2c8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d007      	beq.n	8001578 <HAL_GPIO_Init+0x1d0>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a42      	ldr	r2, [pc, #264]	; (8001674 <HAL_GPIO_Init+0x2cc>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d101      	bne.n	8001574 <HAL_GPIO_Init+0x1cc>
 8001570:	2302      	movs	r3, #2
 8001572:	e004      	b.n	800157e <HAL_GPIO_Init+0x1d6>
 8001574:	2307      	movs	r3, #7
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x1d6>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_GPIO_Init+0x1d6>
 800157c:	2300      	movs	r3, #0
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	4093      	lsls	r3, r2
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800158e:	4937      	ldr	r1, [pc, #220]	; (800166c <HAL_GPIO_Init+0x2c4>)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800159c:	4b36      	ldr	r3, [pc, #216]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015c0:	4a2d      	ldr	r2, [pc, #180]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ea:	4a23      	ldr	r2, [pc, #140]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015f0:	4b21      	ldr	r3, [pc, #132]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001614:	4a18      	ldr	r2, [pc, #96]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	f47f aeaf 	bne.w	80013b8 <HAL_GPIO_Init+0x10>
  }
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000
 8001670:	48000400 	.word	0x48000400
 8001674:	48000800 	.word	0x48000800
 8001678:	40010400 	.word	0x40010400

0800167c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
 8001688:	4613      	mov	r3, r2
 800168a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800168c:	787b      	ldrb	r3, [r7, #1]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001698:	e002      	b.n	80016a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40007000 	.word	0x40007000

080016cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40007000 	.word	0x40007000

080016e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f6:	d130      	bne.n	800175a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001704:	d038      	beq.n	8001778 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001714:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2232      	movs	r2, #50	; 0x32
 800171c:	fb02 f303 	mul.w	r3, r2, r3
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9b      	lsrs	r3, r3, #18
 8001728:	3301      	adds	r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172c:	e002      	b.n	8001734 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3b01      	subs	r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001740:	d102      	bne.n	8001748 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f2      	bne.n	800172e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001754:	d110      	bne.n	8001778 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e00f      	b.n	800177a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001766:	d007      	beq.n	8001778 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001770:	4a05      	ldr	r2, [pc, #20]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001776:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40007000 	.word	0x40007000
 800178c:	20000000 	.word	0x20000000
 8001790:	431bde83 	.word	0x431bde83

08001794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f000 bc02 	b.w	8001fac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a8:	4b96      	ldr	r3, [pc, #600]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b2:	4b94      	ldr	r3, [pc, #592]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80e4 	beq.w	8001992 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_RCC_OscConfig+0x4c>
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b0c      	cmp	r3, #12
 80017d4:	f040 808b 	bne.w	80018ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	f040 8087 	bne.w	80018ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017e0:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_OscConfig+0x64>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e3d9      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1a      	ldr	r2, [r3, #32]
 80017fc:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <HAL_RCC_OscConfig+0x7e>
 8001808:	4b7e      	ldr	r3, [pc, #504]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001810:	e005      	b.n	800181e <HAL_RCC_OscConfig+0x8a>
 8001812:	4b7c      	ldr	r3, [pc, #496]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800181e:	4293      	cmp	r3, r2
 8001820:	d223      	bcs.n	800186a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fd8c 	bl	8002344 <RCC_SetFlashLatencyFromMSIRange>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e3ba      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001836:	4b73      	ldr	r3, [pc, #460]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a72      	ldr	r2, [pc, #456]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 800183c:	f043 0308 	orr.w	r3, r3, #8
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b70      	ldr	r3, [pc, #448]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	496d      	ldr	r1, [pc, #436]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001854:	4b6b      	ldr	r3, [pc, #428]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	4968      	ldr	r1, [pc, #416]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
 8001868:	e025      	b.n	80018b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186a:	4b66      	ldr	r3, [pc, #408]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a65      	ldr	r2, [pc, #404]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001870:	f043 0308 	orr.w	r3, r3, #8
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4960      	ldr	r1, [pc, #384]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001888:	4b5e      	ldr	r3, [pc, #376]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	495b      	ldr	r1, [pc, #364]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fd4c 	bl	8002344 <RCC_SetFlashLatencyFromMSIRange>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e37a      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018b6:	f000 fc81 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 80018ba:	4602      	mov	r2, r0
 80018bc:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	4950      	ldr	r1, [pc, #320]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80018c8:	5ccb      	ldrb	r3, [r1, r3]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	4a4e      	ldr	r2, [pc, #312]	; (8001a0c <HAL_RCC_OscConfig+0x278>)
 80018d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018d6:	4b4e      	ldr	r3, [pc, #312]	; (8001a10 <HAL_RCC_OscConfig+0x27c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fbd2 	bl	8001084 <HAL_InitTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d052      	beq.n	8001990 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	e35e      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d032      	beq.n	800195c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018f6:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a42      	ldr	r2, [pc, #264]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001902:	f7ff fc0f 	bl	8001124 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800190a:	f7ff fc0b 	bl	8001124 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e347      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a35      	ldr	r2, [pc, #212]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 800192e:	f043 0308 	orr.w	r3, r3, #8
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4930      	ldr	r1, [pc, #192]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001946:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	492b      	ldr	r1, [pc, #172]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001956:	4313      	orrs	r3, r2
 8001958:	604b      	str	r3, [r1, #4]
 800195a:	e01a      	b.n	8001992 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800195c:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a28      	ldr	r2, [pc, #160]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001968:	f7ff fbdc 	bl	8001124 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001970:	f7ff fbd8 	bl	8001124 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e314      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x1dc>
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001990:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d073      	beq.n	8001a86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_OscConfig+0x21c>
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d10e      	bne.n	80019c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d10b      	bne.n	80019c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d063      	beq.n	8001a84 <HAL_RCC_OscConfig+0x2f0>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d15f      	bne.n	8001a84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e2f1      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d0:	d106      	bne.n	80019e0 <HAL_RCC_OscConfig+0x24c>
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 80019d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e025      	b.n	8001a2c <HAL_RCC_OscConfig+0x298>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e8:	d114      	bne.n	8001a14 <HAL_RCC_OscConfig+0x280>
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 80019f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a02      	ldr	r2, [pc, #8]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e013      	b.n	8001a2c <HAL_RCC_OscConfig+0x298>
 8001a04:	40021000 	.word	0x40021000
 8001a08:	08004764 	.word	0x08004764
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000004 	.word	0x20000004
 8001a14:	4ba0      	ldr	r3, [pc, #640]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a9f      	ldr	r2, [pc, #636]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b9d      	ldr	r3, [pc, #628]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a9c      	ldr	r2, [pc, #624]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d013      	beq.n	8001a5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff fb76 	bl	8001124 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fb72 	bl	8001124 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e2ae      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a4e:	4b92      	ldr	r3, [pc, #584]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x2a8>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fb62 	bl	8001124 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fb5e 	bl	8001124 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e29a      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a76:	4b88      	ldr	r3, [pc, #544]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x2d0>
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d060      	beq.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x310>
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	d119      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d116      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa4:	4b7c      	ldr	r3, [pc, #496]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_OscConfig+0x328>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e277      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	4b76      	ldr	r3, [pc, #472]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	061b      	lsls	r3, r3, #24
 8001aca:	4973      	ldr	r1, [pc, #460]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad0:	e040      	b.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d023      	beq.n	8001b22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ada:	4b6f      	ldr	r3, [pc, #444]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a6e      	ldr	r2, [pc, #440]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fb1d 	bl	8001124 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aee:	f7ff fb19 	bl	8001124 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e255      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b00:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	4b62      	ldr	r3, [pc, #392]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	495f      	ldr	r1, [pc, #380]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
 8001b20:	e018      	b.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b22:	4b5d      	ldr	r3, [pc, #372]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a5c      	ldr	r2, [pc, #368]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff faf9 	bl	8001124 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b36:	f7ff faf5 	bl	8001124 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e231      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b48:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f0      	bne.n	8001b36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d03c      	beq.n	8001bda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d01c      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b68:	4b4b      	ldr	r3, [pc, #300]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6e:	4a4a      	ldr	r2, [pc, #296]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7ff fad4 	bl	8001124 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff fad0 	bl	8001124 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e20c      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b92:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ef      	beq.n	8001b80 <HAL_RCC_OscConfig+0x3ec>
 8001ba0:	e01b      	b.n	8001bda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba2:	4b3d      	ldr	r3, [pc, #244]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba8:	4a3b      	ldr	r2, [pc, #236]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fab7 	bl	8001124 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bba:	f7ff fab3 	bl	8001124 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1ef      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bcc:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1ef      	bne.n	8001bba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80a6 	beq.w	8001d34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be8:	2300      	movs	r3, #0
 8001bea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bec:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10d      	bne.n	8001c14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfc:	4a26      	ldr	r2, [pc, #152]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c02:	6593      	str	r3, [r2, #88]	; 0x58
 8001c04:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c10:	2301      	movs	r3, #1
 8001c12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <HAL_RCC_OscConfig+0x508>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d118      	bne.n	8001c52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <HAL_RCC_OscConfig+0x508>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <HAL_RCC_OscConfig+0x508>)
 8001c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2c:	f7ff fa7a 	bl	8001124 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c34:	f7ff fa76 	bl	8001124 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e1b2      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_RCC_OscConfig+0x508>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d108      	bne.n	8001c6c <HAL_RCC_OscConfig+0x4d8>
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c60:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c6a:	e029      	b.n	8001cc0 <HAL_RCC_OscConfig+0x52c>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d115      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x50c>
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7a:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8a:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <HAL_RCC_OscConfig+0x504>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c94:	e014      	b.n	8001cc0 <HAL_RCC_OscConfig+0x52c>
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	4b9a      	ldr	r3, [pc, #616]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	4a99      	ldr	r2, [pc, #612]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb0:	4b96      	ldr	r3, [pc, #600]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb6:	4a95      	ldr	r2, [pc, #596]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001cb8:	f023 0304 	bic.w	r3, r3, #4
 8001cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d016      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7ff fa2c 	bl	8001124 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fa28 	bl	8001124 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e162      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce6:	4b89      	ldr	r3, [pc, #548]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0ed      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x53c>
 8001cf4:	e015      	b.n	8001d22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fa15 	bl	8001124 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7ff fa11 	bl	8001124 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e14b      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d14:	4b7d      	ldr	r3, [pc, #500]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1ed      	bne.n	8001cfe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d22:	7ffb      	ldrb	r3, [r7, #31]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d28:	4b78      	ldr	r3, [pc, #480]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	4a77      	ldr	r2, [pc, #476]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0320 	and.w	r3, r3, #32
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d03c      	beq.n	8001dba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01c      	beq.n	8001d82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d48:	4b70      	ldr	r3, [pc, #448]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d4e:	4a6f      	ldr	r2, [pc, #444]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff f9e4 	bl	8001124 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d60:	f7ff f9e0 	bl	8001124 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e11c      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d72:	4b66      	ldr	r3, [pc, #408]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ef      	beq.n	8001d60 <HAL_RCC_OscConfig+0x5cc>
 8001d80:	e01b      	b.n	8001dba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d82:	4b62      	ldr	r3, [pc, #392]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d88:	4a60      	ldr	r2, [pc, #384]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d92:	f7ff f9c7 	bl	8001124 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9a:	f7ff f9c3 	bl	8001124 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e0ff      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dac:	4b57      	ldr	r3, [pc, #348]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ef      	bne.n	8001d9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80f3 	beq.w	8001faa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	f040 80c9 	bne.w	8001f60 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dce:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0203 	and.w	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d12c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	3b01      	subs	r3, #1
 8001dee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d123      	bne.n	8001e3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d11b      	bne.n	8001e3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d113      	bne.n	8001e3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1e:	085b      	lsrs	r3, r3, #1
 8001e20:	3b01      	subs	r3, #1
 8001e22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d109      	bne.n	8001e3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	085b      	lsrs	r3, r3, #1
 8001e34:	3b01      	subs	r3, #1
 8001e36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d06b      	beq.n	8001f14 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d062      	beq.n	8001f08 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e42:	4b32      	ldr	r3, [pc, #200]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0ac      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e52:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a2d      	ldr	r2, [pc, #180]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001e58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e5e:	f7ff f961 	bl	8001124 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e66:	f7ff f95d 	bl	8001124 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e099      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e78:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f0      	bne.n	8001e66 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e84:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_RCC_OscConfig+0x77c>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e94:	3a01      	subs	r2, #1
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	4311      	orrs	r1, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e9e:	0212      	lsls	r2, r2, #8
 8001ea0:	4311      	orrs	r1, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ea6:	0852      	lsrs	r2, r2, #1
 8001ea8:	3a01      	subs	r2, #1
 8001eaa:	0552      	lsls	r2, r2, #21
 8001eac:	4311      	orrs	r1, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eb2:	0852      	lsrs	r2, r2, #1
 8001eb4:	3a01      	subs	r2, #1
 8001eb6:	0652      	lsls	r2, r2, #25
 8001eb8:	4311      	orrs	r1, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ebe:	06d2      	lsls	r2, r2, #27
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	4912      	ldr	r1, [pc, #72]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ede:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ee0:	f7ff f920 	bl	8001124 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7ff f91c 	bl	8001124 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e058      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f06:	e050      	b.n	8001faa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e04f      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_RCC_OscConfig+0x820>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d144      	bne.n	8001faa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f20:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <HAL_RCC_OscConfig+0x820>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <HAL_RCC_OscConfig+0x820>)
 8001f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f2c:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <HAL_RCC_OscConfig+0x820>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4a20      	ldr	r2, [pc, #128]	; (8001fb4 <HAL_RCC_OscConfig+0x820>)
 8001f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f38:	f7ff f8f4 	bl	8001124 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f40:	f7ff f8f0 	bl	8001124 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e02c      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_RCC_OscConfig+0x820>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x7ac>
 8001f5e:	e024      	b.n	8001faa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	d01f      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <HAL_RCC_OscConfig+0x820>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <HAL_RCC_OscConfig+0x820>)
 8001f6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7ff f8d7 	bl	8001124 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7ff f8d3 	bl	8001124 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e00f      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_RCC_OscConfig+0x820>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f0      	bne.n	8001f7a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_RCC_OscConfig+0x820>)
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	4905      	ldr	r1, [pc, #20]	; (8001fb4 <HAL_RCC_OscConfig+0x820>)
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_RCC_OscConfig+0x824>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60cb      	str	r3, [r1, #12]
 8001fa4:	e001      	b.n	8001faa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3720      	adds	r7, #32
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	feeefffc 	.word	0xfeeefffc

08001fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0e7      	b.n	80021a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b75      	ldr	r3, [pc, #468]	; (80021a8 <HAL_RCC_ClockConfig+0x1ec>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d910      	bls.n	8002000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b72      	ldr	r3, [pc, #456]	; (80021a8 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 0207 	bic.w	r2, r3, #7
 8001fe6:	4970      	ldr	r1, [pc, #448]	; (80021a8 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b6e      	ldr	r3, [pc, #440]	; (80021a8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0cf      	b.n	80021a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d010      	beq.n	800202e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	4b66      	ldr	r3, [pc, #408]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002018:	429a      	cmp	r2, r3
 800201a:	d908      	bls.n	800202e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201c:	4b63      	ldr	r3, [pc, #396]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4960      	ldr	r1, [pc, #384]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d04c      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002042:	4b5a      	ldr	r3, [pc, #360]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d121      	bne.n	8002092 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0a6      	b.n	80021a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800205a:	4b54      	ldr	r3, [pc, #336]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d115      	bne.n	8002092 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e09a      	b.n	80021a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002072:	4b4e      	ldr	r3, [pc, #312]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e08e      	b.n	80021a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002082:	4b4a      	ldr	r3, [pc, #296]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e086      	b.n	80021a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002092:	4b46      	ldr	r3, [pc, #280]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f023 0203 	bic.w	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4943      	ldr	r1, [pc, #268]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a4:	f7ff f83e 	bl	8001124 <HAL_GetTick>
 80020a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ac:	f7ff f83a 	bl	8001124 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e06e      	b.n	80021a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 020c 	and.w	r2, r3, #12
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d1eb      	bne.n	80020ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d010      	beq.n	8002102 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d208      	bcs.n	8002102 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f0:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	492b      	ldr	r1, [pc, #172]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d210      	bcs.n	8002132 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 0207 	bic.w	r2, r3, #7
 8002118:	4923      	ldr	r1, [pc, #140]	; (80021a8 <HAL_RCC_ClockConfig+0x1ec>)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002120:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e036      	b.n	80021a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213e:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	4918      	ldr	r1, [pc, #96]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d009      	beq.n	8002170 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4910      	ldr	r1, [pc, #64]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 800216c:	4313      	orrs	r3, r2
 800216e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002170:	f000 f824 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <HAL_RCC_ClockConfig+0x1f0>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	490b      	ldr	r1, [pc, #44]	; (80021b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
 800218c:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1f8>)
 800218e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1fc>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe ff75 	bl	8001084 <HAL_InitTick>
 800219a:	4603      	mov	r3, r0
 800219c:	72fb      	strb	r3, [r7, #11]

  return status;
 800219e:	7afb      	ldrb	r3, [r7, #11]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40022000 	.word	0x40022000
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08004764 	.word	0x08004764
 80021b4:	20000000 	.word	0x20000000
 80021b8:	20000004 	.word	0x20000004

080021bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ca:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d4:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x34>
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d121      	bne.n	800222e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d11e      	bne.n	800222e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021f0:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d107      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021fc:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	e005      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800220c:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002218:	4a2b      	ldr	r2, [pc, #172]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002220:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10d      	bne.n	8002244 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b04      	cmp	r3, #4
 8002232:	d102      	bne.n	800223a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	e004      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d101      	bne.n	8002244 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002240:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002242:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	2b0c      	cmp	r3, #12
 8002248:	d134      	bne.n	80022b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800224a:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d003      	beq.n	8002262 <HAL_RCC_GetSysClockFreq+0xa6>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d003      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0xac>
 8002260:	e005      	b.n	800226e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002262:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002264:	617b      	str	r3, [r7, #20]
      break;
 8002266:	e005      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800226a:	617b      	str	r3, [r7, #20]
      break;
 800226c:	e002      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	617b      	str	r3, [r7, #20]
      break;
 8002272:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	3301      	adds	r3, #1
 8002280:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	fb03 f202 	mul.w	r2, r3, r2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	0e5b      	lsrs	r3, r3, #25
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	3301      	adds	r3, #1
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022b4:	69bb      	ldr	r3, [r7, #24]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	0800477c 	.word	0x0800477c
 80022cc:	00f42400 	.word	0x00f42400
 80022d0:	007a1200 	.word	0x007a1200

080022d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000000 	.word	0x20000000

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022f0:	f7ff fff0 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	4904      	ldr	r1, [pc, #16]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	08004774 	.word	0x08004774

08002318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800231c:	f7ff ffda 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0adb      	lsrs	r3, r3, #11
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4904      	ldr	r1, [pc, #16]	; (8002340 <HAL_RCC_GetPCLK2Freq+0x28>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	08004774 	.word	0x08004774

08002344 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002350:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800235c:	f7ff f9b6 	bl	80016cc <HAL_PWREx_GetVoltageRange>
 8002360:	6178      	str	r0, [r7, #20]
 8002362:	e014      	b.n	800238e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002364:	4b25      	ldr	r3, [pc, #148]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	4a24      	ldr	r2, [pc, #144]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236e:	6593      	str	r3, [r2, #88]	; 0x58
 8002370:	4b22      	ldr	r3, [pc, #136]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800237c:	f7ff f9a6 	bl	80016cc <HAL_PWREx_GetVoltageRange>
 8002380:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002394:	d10b      	bne.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b80      	cmp	r3, #128	; 0x80
 800239a:	d919      	bls.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2ba0      	cmp	r3, #160	; 0xa0
 80023a0:	d902      	bls.n	80023a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023a2:	2302      	movs	r3, #2
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	e013      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023a8:	2301      	movs	r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	e010      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b80      	cmp	r3, #128	; 0x80
 80023b2:	d902      	bls.n	80023ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023b4:	2303      	movs	r3, #3
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	e00a      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b80      	cmp	r3, #128	; 0x80
 80023be:	d102      	bne.n	80023c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023c0:	2302      	movs	r3, #2
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	e004      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b70      	cmp	r3, #112	; 0x70
 80023ca:	d101      	bne.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023cc:	2301      	movs	r3, #1
 80023ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 0207 	bic.w	r2, r3, #7
 80023d8:	4909      	ldr	r1, [pc, #36]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d001      	beq.n	80023f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	40022000 	.word	0x40022000

08002404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800240c:	2300      	movs	r3, #0
 800240e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002410:	2300      	movs	r3, #0
 8002412:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800241c:	2b00      	cmp	r3, #0
 800241e:	d031      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002424:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002428:	d01a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800242a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800242e:	d814      	bhi.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002434:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002438:	d10f      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800243a:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	4a5c      	ldr	r2, [pc, #368]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002446:	e00c      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3304      	adds	r3, #4
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f9de 	bl	8002810 <RCCEx_PLLSAI1_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002458:	e003      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	74fb      	strb	r3, [r7, #19]
      break;
 800245e:	e000      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002468:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	494e      	ldr	r1, [pc, #312]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800247e:	e001      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002480:	7cfb      	ldrb	r3, [r7, #19]
 8002482:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 809e 	beq.w	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002496:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80024a6:	2300      	movs	r3, #0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00d      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ac:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	4a3f      	ldr	r2, [pc, #252]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b6:	6593      	str	r3, [r2, #88]	; 0x58
 80024b8:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c4:	2301      	movs	r3, #1
 80024c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c8:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a39      	ldr	r2, [pc, #228]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024d4:	f7fe fe26 	bl	8001124 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024da:	e009      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024dc:	f7fe fe22 	bl	8001124 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d902      	bls.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	74fb      	strb	r3, [r7, #19]
        break;
 80024ee:	e005      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024f0:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ef      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d15a      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002502:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01e      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	429a      	cmp	r2, r3
 800251c:	d019      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800251e:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002528:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800253a:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002540:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800254a:	4a19      	ldr	r2, [pc, #100]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d016      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe fde2 	bl	8001124 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002562:	e00b      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002564:	f7fe fdde 	bl	8001124 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d902      	bls.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	74fb      	strb	r3, [r7, #19]
            break;
 800257a:	e006      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0ec      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10b      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259e:	4904      	ldr	r1, [pc, #16]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025a6:	e009      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	74bb      	strb	r3, [r7, #18]
 80025ac:	e006      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025bc:	7c7b      	ldrb	r3, [r7, #17]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c2:	4b8a      	ldr	r3, [pc, #552]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	4a89      	ldr	r2, [pc, #548]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025da:	4b84      	ldr	r3, [pc, #528]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f023 0203 	bic.w	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4980      	ldr	r1, [pc, #512]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025fc:	4b7b      	ldr	r3, [pc, #492]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f023 020c 	bic.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	4978      	ldr	r1, [pc, #480]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800261e:	4b73      	ldr	r3, [pc, #460]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	496f      	ldr	r1, [pc, #444]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002640:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264e:	4967      	ldr	r1, [pc, #412]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002662:	4b62      	ldr	r3, [pc, #392]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	495e      	ldr	r1, [pc, #376]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002684:	4b59      	ldr	r3, [pc, #356]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	4956      	ldr	r1, [pc, #344]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026a6:	4b51      	ldr	r3, [pc, #324]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	494d      	ldr	r1, [pc, #308]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d028      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026c8:	4b48      	ldr	r3, [pc, #288]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4945      	ldr	r1, [pc, #276]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e6:	d106      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e8:	4b40      	ldr	r3, [pc, #256]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4a3f      	ldr	r2, [pc, #252]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026f2:	60d3      	str	r3, [r2, #12]
 80026f4:	e011      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026fe:	d10c      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	2101      	movs	r1, #1
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f882 	bl	8002810 <RCCEx_PLLSAI1_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d028      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002726:	4b31      	ldr	r3, [pc, #196]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	492d      	ldr	r1, [pc, #180]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002744:	d106      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	4a28      	ldr	r2, [pc, #160]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800274c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002750:	60d3      	str	r3, [r2, #12]
 8002752:	e011      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800275c:	d10c      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	2101      	movs	r1, #1
 8002764:	4618      	mov	r0, r3
 8002766:	f000 f853 	bl	8002810 <RCCEx_PLLSAI1_Config>
 800276a:	4603      	mov	r3, r0
 800276c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01c      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002792:	4916      	ldr	r1, [pc, #88]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027a2:	d10c      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3304      	adds	r3, #4
 80027a8:	2102      	movs	r1, #2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f830 	bl	8002810 <RCCEx_PLLSAI1_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d8:	4904      	ldr	r1, [pc, #16]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000

080027f0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	6013      	str	r3, [r2, #0]
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000

08002810 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800281e:	4b74      	ldr	r3, [pc, #464]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d018      	beq.n	800285c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800282a:	4b71      	ldr	r3, [pc, #452]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0203 	and.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d10d      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
       ||
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002842:	4b6b      	ldr	r3, [pc, #428]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
       ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d047      	beq.n	80028e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	e044      	b.n	80028e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d018      	beq.n	8002896 <RCCEx_PLLSAI1_Config+0x86>
 8002864:	2b03      	cmp	r3, #3
 8002866:	d825      	bhi.n	80028b4 <RCCEx_PLLSAI1_Config+0xa4>
 8002868:	2b01      	cmp	r3, #1
 800286a:	d002      	beq.n	8002872 <RCCEx_PLLSAI1_Config+0x62>
 800286c:	2b02      	cmp	r3, #2
 800286e:	d009      	beq.n	8002884 <RCCEx_PLLSAI1_Config+0x74>
 8002870:	e020      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002872:	4b5f      	ldr	r3, [pc, #380]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11d      	bne.n	80028ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002882:	e01a      	b.n	80028ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002884:	4b5a      	ldr	r3, [pc, #360]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288c:	2b00      	cmp	r3, #0
 800288e:	d116      	bne.n	80028be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002894:	e013      	b.n	80028be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002896:	4b56      	ldr	r3, [pc, #344]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10f      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028a2:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028b2:	e006      	b.n	80028c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      break;
 80028b8:	e004      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ba:	bf00      	nop
 80028bc:	e002      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10d      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028ca:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6819      	ldr	r1, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	430b      	orrs	r3, r1
 80028e0:	4943      	ldr	r1, [pc, #268]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d17c      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028ec:	4b40      	ldr	r3, [pc, #256]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a3f      	ldr	r2, [pc, #252]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f8:	f7fe fc14 	bl	8001124 <HAL_GetTick>
 80028fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028fe:	e009      	b.n	8002914 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002900:	f7fe fc10 	bl	8001124 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d902      	bls.n	8002914 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	73fb      	strb	r3, [r7, #15]
        break;
 8002912:	e005      	b.n	8002920 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002914:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ef      	bne.n	8002900 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d15f      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d110      	bne.n	800294e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800292c:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002934:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6892      	ldr	r2, [r2, #8]
 800293c:	0211      	lsls	r1, r2, #8
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68d2      	ldr	r2, [r2, #12]
 8002942:	06d2      	lsls	r2, r2, #27
 8002944:	430a      	orrs	r2, r1
 8002946:	492a      	ldr	r1, [pc, #168]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002948:	4313      	orrs	r3, r2
 800294a:	610b      	str	r3, [r1, #16]
 800294c:	e027      	b.n	800299e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d112      	bne.n	800297a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002954:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800295c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6892      	ldr	r2, [r2, #8]
 8002964:	0211      	lsls	r1, r2, #8
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6912      	ldr	r2, [r2, #16]
 800296a:	0852      	lsrs	r2, r2, #1
 800296c:	3a01      	subs	r2, #1
 800296e:	0552      	lsls	r2, r2, #21
 8002970:	430a      	orrs	r2, r1
 8002972:	491f      	ldr	r1, [pc, #124]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002974:	4313      	orrs	r3, r2
 8002976:	610b      	str	r3, [r1, #16]
 8002978:	e011      	b.n	800299e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002982:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6892      	ldr	r2, [r2, #8]
 800298a:	0211      	lsls	r1, r2, #8
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6952      	ldr	r2, [r2, #20]
 8002990:	0852      	lsrs	r2, r2, #1
 8002992:	3a01      	subs	r2, #1
 8002994:	0652      	lsls	r2, r2, #25
 8002996:	430a      	orrs	r2, r1
 8002998:	4915      	ldr	r1, [pc, #84]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800299a:	4313      	orrs	r3, r2
 800299c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800299e:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029aa:	f7fe fbbb 	bl	8001124 <HAL_GetTick>
 80029ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029b0:	e009      	b.n	80029c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029b2:	f7fe fbb7 	bl	8001124 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d902      	bls.n	80029c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	73fb      	strb	r3, [r7, #15]
          break;
 80029c4:	e005      	b.n	80029d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0ef      	beq.n	80029b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4903      	ldr	r1, [pc, #12]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000

080029f4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e049      	b.n	8002a9a <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	795b      	ldrb	r3, [r3, #5]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe f9a2 	bl	8000d60 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0204 	orr.w	r2, r2, #4
 8002a30:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d104      	bne.n	8002a4a <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2204      	movs	r2, #4
 8002a44:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e027      	b.n	8002a9a <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002a4a:	f7fe fb6b 	bl	8001124 <HAL_GetTick>
 8002a4e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002a50:	e015      	b.n	8002a7e <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002a52:	f7fe fb67 	bl	8001124 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d90e      	bls.n	8002a7e <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d107      	bne.n	8002a7e <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2204      	movs	r2, #4
 8002a72:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00d      	b.n	8002a9a <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d0e2      	beq.n	8002a52 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d06c      	beq.n	8002b8e <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d106      	bne.n	8002ace <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7fe f98d 	bl	8000de8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	22ca      	movs	r2, #202	; 0xca
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2253      	movs	r2, #83	; 0x53
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f9a0 	bl	8002e2c <RTC_EnterInitMode>
 8002aec:	4603      	mov	r3, r0
 8002aee:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d14b      	bne.n	8002b8e <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b08:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6899      	ldr	r1, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68d2      	ldr	r2, [r2, #12]
 8002b30:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6919      	ldr	r1, [r3, #16]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	041a      	lsls	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f9a4 	bl	8002e94 <RTC_ExitInitMode>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d11b      	bne.n	8002b8e <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0203 	bic.w	r2, r2, #3
 8002b64:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69da      	ldr	r2, [r3, #28]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	22ff      	movs	r2, #255	; 0xff
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_RTC_SetTime+0x1a>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e08b      	b.n	8002cca <HAL_RTC_SetTime+0x132>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	22ca      	movs	r2, #202	; 0xca
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2253      	movs	r2, #83	; 0x53
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f92a 	bl	8002e2c <RTC_EnterInitMode>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d163      	bne.n	8002caa <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d126      	bne.n	8002c36 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 f985 	bl	8002f10 <RTC_ByteToBcd2>
 8002c06:	4603      	mov	r3, r0
 8002c08:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	785b      	ldrb	r3, [r3, #1]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f97e 	bl	8002f10 <RTC_ByteToBcd2>
 8002c14:	4603      	mov	r3, r0
 8002c16:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c18:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	789b      	ldrb	r3, [r3, #2]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f976 	bl	8002f10 <RTC_ByteToBcd2>
 8002c24:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c26:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	78db      	ldrb	r3, [r3, #3]
 8002c2e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	e018      	b.n	8002c68 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d102      	bne.n	8002c4a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2200      	movs	r2, #0
 8002c48:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	785b      	ldrb	r3, [r3, #1]
 8002c54:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c56:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c5c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	78db      	ldrb	r3, [r3, #3]
 8002c62:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002c72:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002c76:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c86:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6899      	ldr	r1, [r3, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f8f7 	bl	8002e94 <RTC_ExitInitMode>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	22ff      	movs	r2, #255	; 0xff
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002cc8:	7cfb      	ldrb	r3, [r7, #19]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd90      	pop	{r4, r7, pc}

08002cd2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002cd2:	b590      	push	{r4, r7, lr}
 8002cd4:	b087      	sub	sp, #28
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_RTC_SetDate+0x1a>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e075      	b.n	8002dd8 <HAL_RTC_SetDate+0x106>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10e      	bne.n	8002d20 <HAL_RTC_SetDate+0x4e>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	785b      	ldrb	r3, [r3, #1]
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	785b      	ldrb	r3, [r3, #1]
 8002d12:	f023 0310 	bic.w	r3, r3, #16
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	330a      	adds	r3, #10
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d11c      	bne.n	8002d60 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	78db      	ldrb	r3, [r3, #3]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f8f0 	bl	8002f10 <RTC_ByteToBcd2>
 8002d30:	4603      	mov	r3, r0
 8002d32:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	785b      	ldrb	r3, [r3, #1]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 f8e9 	bl	8002f10 <RTC_ByteToBcd2>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002d42:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	789b      	ldrb	r3, [r3, #2]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f8e1 	bl	8002f10 <RTC_ByteToBcd2>
 8002d4e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002d50:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e00e      	b.n	8002d7e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	78db      	ldrb	r3, [r3, #3]
 8002d64:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	785b      	ldrb	r3, [r3, #1]
 8002d6a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002d6c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002d72:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	22ca      	movs	r2, #202	; 0xca
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2253      	movs	r2, #83	; 0x53
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f84c 	bl	8002e2c <RTC_EnterInitMode>
 8002d94:	4603      	mov	r3, r0
 8002d96:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002da8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002dac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f870 	bl	8002e94 <RTC_ExitInitMode>
 8002db4:	4603      	mov	r3, r0
 8002db6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	22ff      	movs	r2, #255	; 0xff
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002dc0:	7cfb      	ldrb	r3, [r7, #19]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d103      	bne.n	8002dce <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002dd6:	7cfb      	ldrb	r3, [r7, #19]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	371c      	adds	r7, #28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd90      	pop	{r4, r7, pc}

08002de0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002df6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002df8:	f7fe f994 	bl	8001124 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002dfe:	e009      	b.n	8002e14 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e00:	f7fe f990 	bl	8001124 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e0e:	d901      	bls.n	8002e14 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e007      	b.n	8002e24 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0ee      	beq.n	8002e00 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d120      	bne.n	8002e88 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002e50:	f7fe f968 	bl	8001124 <HAL_GetTick>
 8002e54:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002e56:	e00d      	b.n	8002e74 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002e58:	f7fe f964 	bl	8001124 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e66:	d905      	bls.n	8002e74 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d102      	bne.n	8002e88 <RTC_EnterInitMode+0x5c>
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d1e7      	bne.n	8002e58 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <RTC_ExitInitMode+0x78>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4a19      	ldr	r2, [pc, #100]	; (8002f0c <RTC_ExitInitMode+0x78>)
 8002ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eaa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002eac:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <RTC_ExitInitMode+0x78>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10c      	bne.n	8002ed2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ff91 	bl	8002de0 <HAL_RTC_WaitForSynchro>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01e      	beq.n	8002f02 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	e017      	b.n	8002f02 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <RTC_ExitInitMode+0x78>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	4a0d      	ldr	r2, [pc, #52]	; (8002f0c <RTC_ExitInitMode+0x78>)
 8002ed8:	f023 0320 	bic.w	r3, r3, #32
 8002edc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ff7e 	bl	8002de0 <HAL_RTC_WaitForSynchro>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2203      	movs	r2, #3
 8002eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <RTC_ExitInitMode+0x78>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	4a04      	ldr	r2, [pc, #16]	; (8002f0c <RTC_ExitInitMode+0x78>)
 8002efc:	f043 0320 	orr.w	r3, r3, #32
 8002f00:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40002800 	.word	0x40002800

08002f10 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002f22:	e005      	b.n	8002f30 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8002f2a:	7afb      	ldrb	r3, [r7, #11]
 8002f2c:	3b0a      	subs	r3, #10
 8002f2e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002f30:	7afb      	ldrb	r3, [r7, #11]
 8002f32:	2b09      	cmp	r3, #9
 8002f34:	d8f6      	bhi.n	8002f24 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	7afb      	ldrb	r3, [r7, #11]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	b2db      	uxtb	r3, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002f58:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8002f5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f5e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002f7e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f80b 	bl	8002f9c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40010400 	.word	0x40010400

08002f9c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e040      	b.n	8003044 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd ff40 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2224      	movs	r2, #36	; 0x24
 8002fdc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f992 	bl	8003318 <UART_SetConfig>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e022      	b.n	8003044 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fbb2 	bl	8003770 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800301a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800302a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fc39 	bl	80038b4 <UART_CheckIdleState>
 8003042:	4603      	mov	r3, r0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003060:	2b20      	cmp	r3, #32
 8003062:	f040 8082 	bne.w	800316a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_UART_Transmit+0x26>
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07a      	b.n	800316c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_UART_Transmit+0x38>
 8003080:	2302      	movs	r3, #2
 8003082:	e073      	b.n	800316c <HAL_UART_Transmit+0x120>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2221      	movs	r2, #33	; 0x21
 8003098:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800309a:	f7fe f843 	bl	8001124 <HAL_GetTick>
 800309e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b8:	d108      	bne.n	80030cc <HAL_UART_Transmit+0x80>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d104      	bne.n	80030cc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e003      	b.n	80030d4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80030dc:	e02d      	b.n	800313a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fc2c 	bl	8003946 <UART_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e039      	b.n	800316c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10b      	bne.n	8003116 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800310a:	b292      	uxth	r2, r2
 800310c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	3302      	adds	r3, #2
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	e008      	b.n	8003128 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	b292      	uxth	r2, r2
 8003120:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3301      	adds	r3, #1
 8003126:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1cb      	bne.n	80030de <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2200      	movs	r2, #0
 800314e:	2140      	movs	r1, #64	; 0x40
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fbf8 	bl	8003946 <UART_WaitOnFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e005      	b.n	800316c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e000      	b.n	800316c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
  }
}
 800316c:	4618      	mov	r0, r3
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	; 0x28
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003188:	2b20      	cmp	r3, #32
 800318a:	f040 80bf 	bne.w	800330c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <HAL_UART_Receive+0x26>
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0b7      	b.n	800330e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_UART_Receive+0x38>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e0b0      	b.n	800330e <HAL_UART_Receive+0x19a>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2222      	movs	r2, #34	; 0x22
 80031c0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031c8:	f7fd ffac 	bl	8001124 <HAL_GetTick>
 80031cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	88fa      	ldrh	r2, [r7, #6]
 80031d2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	88fa      	ldrh	r2, [r7, #6]
 80031da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e6:	d10e      	bne.n	8003206 <HAL_UART_Receive+0x92>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_UART_Receive+0x88>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80031f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031fa:	e02d      	b.n	8003258 <HAL_UART_Receive+0xe4>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	22ff      	movs	r2, #255	; 0xff
 8003200:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003204:	e028      	b.n	8003258 <HAL_UART_Receive+0xe4>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10d      	bne.n	800322a <HAL_UART_Receive+0xb6>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <HAL_UART_Receive+0xac>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	22ff      	movs	r2, #255	; 0xff
 800321a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800321e:	e01b      	b.n	8003258 <HAL_UART_Receive+0xe4>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	227f      	movs	r2, #127	; 0x7f
 8003224:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003228:	e016      	b.n	8003258 <HAL_UART_Receive+0xe4>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003232:	d10d      	bne.n	8003250 <HAL_UART_Receive+0xdc>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d104      	bne.n	8003246 <HAL_UART_Receive+0xd2>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	227f      	movs	r2, #127	; 0x7f
 8003240:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003244:	e008      	b.n	8003258 <HAL_UART_Receive+0xe4>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	223f      	movs	r2, #63	; 0x3f
 800324a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800324e:	e003      	b.n	8003258 <HAL_UART_Receive+0xe4>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800325e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003268:	d108      	bne.n	800327c <HAL_UART_Receive+0x108>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e003      	b.n	8003284 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800328c:	e033      	b.n	80032f6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2200      	movs	r2, #0
 8003296:	2120      	movs	r1, #32
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fb54 	bl	8003946 <UART_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e032      	b.n	800330e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10c      	bne.n	80032c8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	8a7b      	ldrh	r3, [r7, #18]
 80032b8:	4013      	ands	r3, r2
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	3302      	adds	r3, #2
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e00d      	b.n	80032e4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	8a7b      	ldrh	r3, [r7, #18]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	4013      	ands	r3, r2
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3301      	adds	r3, #1
 80032e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1c5      	bne.n	800328e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	e000      	b.n	800330e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
  }
}
 800330e:	4618      	mov	r0, r3
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800331c:	b08a      	sub	sp, #40	; 0x28
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	431a      	orrs	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	431a      	orrs	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	4313      	orrs	r3, r2
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	4bb4      	ldr	r3, [pc, #720]	; (8003618 <UART_SetConfig+0x300>)
 8003348:	4013      	ands	r3, r2
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003350:	430b      	orrs	r3, r1
 8003352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4aa9      	ldr	r2, [pc, #676]	; (800361c <UART_SetConfig+0x304>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003380:	4313      	orrs	r3, r2
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	430a      	orrs	r2, r1
 8003396:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4aa0      	ldr	r2, [pc, #640]	; (8003620 <UART_SetConfig+0x308>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d126      	bne.n	80033f0 <UART_SetConfig+0xd8>
 80033a2:	4ba0      	ldr	r3, [pc, #640]	; (8003624 <UART_SetConfig+0x30c>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d81b      	bhi.n	80033e8 <UART_SetConfig+0xd0>
 80033b0:	a201      	add	r2, pc, #4	; (adr r2, 80033b8 <UART_SetConfig+0xa0>)
 80033b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b6:	bf00      	nop
 80033b8:	080033c9 	.word	0x080033c9
 80033bc:	080033d9 	.word	0x080033d9
 80033c0:	080033d1 	.word	0x080033d1
 80033c4:	080033e1 	.word	0x080033e1
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ce:	e080      	b.n	80034d2 <UART_SetConfig+0x1ba>
 80033d0:	2302      	movs	r3, #2
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d6:	e07c      	b.n	80034d2 <UART_SetConfig+0x1ba>
 80033d8:	2304      	movs	r3, #4
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033de:	e078      	b.n	80034d2 <UART_SetConfig+0x1ba>
 80033e0:	2308      	movs	r3, #8
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033e6:	e074      	b.n	80034d2 <UART_SetConfig+0x1ba>
 80033e8:	2310      	movs	r3, #16
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ee:	e070      	b.n	80034d2 <UART_SetConfig+0x1ba>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a8c      	ldr	r2, [pc, #560]	; (8003628 <UART_SetConfig+0x310>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d138      	bne.n	800346c <UART_SetConfig+0x154>
 80033fa:	4b8a      	ldr	r3, [pc, #552]	; (8003624 <UART_SetConfig+0x30c>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b0c      	cmp	r3, #12
 8003406:	d82d      	bhi.n	8003464 <UART_SetConfig+0x14c>
 8003408:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <UART_SetConfig+0xf8>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003445 	.word	0x08003445
 8003414:	08003465 	.word	0x08003465
 8003418:	08003465 	.word	0x08003465
 800341c:	08003465 	.word	0x08003465
 8003420:	08003455 	.word	0x08003455
 8003424:	08003465 	.word	0x08003465
 8003428:	08003465 	.word	0x08003465
 800342c:	08003465 	.word	0x08003465
 8003430:	0800344d 	.word	0x0800344d
 8003434:	08003465 	.word	0x08003465
 8003438:	08003465 	.word	0x08003465
 800343c:	08003465 	.word	0x08003465
 8003440:	0800345d 	.word	0x0800345d
 8003444:	2300      	movs	r3, #0
 8003446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800344a:	e042      	b.n	80034d2 <UART_SetConfig+0x1ba>
 800344c:	2302      	movs	r3, #2
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003452:	e03e      	b.n	80034d2 <UART_SetConfig+0x1ba>
 8003454:	2304      	movs	r3, #4
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345a:	e03a      	b.n	80034d2 <UART_SetConfig+0x1ba>
 800345c:	2308      	movs	r3, #8
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e036      	b.n	80034d2 <UART_SetConfig+0x1ba>
 8003464:	2310      	movs	r3, #16
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346a:	e032      	b.n	80034d2 <UART_SetConfig+0x1ba>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a6a      	ldr	r2, [pc, #424]	; (800361c <UART_SetConfig+0x304>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d12a      	bne.n	80034cc <UART_SetConfig+0x1b4>
 8003476:	4b6b      	ldr	r3, [pc, #428]	; (8003624 <UART_SetConfig+0x30c>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003480:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003484:	d01a      	beq.n	80034bc <UART_SetConfig+0x1a4>
 8003486:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800348a:	d81b      	bhi.n	80034c4 <UART_SetConfig+0x1ac>
 800348c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003490:	d00c      	beq.n	80034ac <UART_SetConfig+0x194>
 8003492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003496:	d815      	bhi.n	80034c4 <UART_SetConfig+0x1ac>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <UART_SetConfig+0x18c>
 800349c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a0:	d008      	beq.n	80034b4 <UART_SetConfig+0x19c>
 80034a2:	e00f      	b.n	80034c4 <UART_SetConfig+0x1ac>
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034aa:	e012      	b.n	80034d2 <UART_SetConfig+0x1ba>
 80034ac:	2302      	movs	r3, #2
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b2:	e00e      	b.n	80034d2 <UART_SetConfig+0x1ba>
 80034b4:	2304      	movs	r3, #4
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ba:	e00a      	b.n	80034d2 <UART_SetConfig+0x1ba>
 80034bc:	2308      	movs	r3, #8
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c2:	e006      	b.n	80034d2 <UART_SetConfig+0x1ba>
 80034c4:	2310      	movs	r3, #16
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ca:	e002      	b.n	80034d2 <UART_SetConfig+0x1ba>
 80034cc:	2310      	movs	r3, #16
 80034ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a51      	ldr	r2, [pc, #324]	; (800361c <UART_SetConfig+0x304>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d17a      	bne.n	80035d2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d824      	bhi.n	800352e <UART_SetConfig+0x216>
 80034e4:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <UART_SetConfig+0x1d4>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	08003511 	.word	0x08003511
 80034f0:	0800352f 	.word	0x0800352f
 80034f4:	08003519 	.word	0x08003519
 80034f8:	0800352f 	.word	0x0800352f
 80034fc:	0800351f 	.word	0x0800351f
 8003500:	0800352f 	.word	0x0800352f
 8003504:	0800352f 	.word	0x0800352f
 8003508:	0800352f 	.word	0x0800352f
 800350c:	08003527 	.word	0x08003527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003510:	f7fe feec 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8003514:	61f8      	str	r0, [r7, #28]
        break;
 8003516:	e010      	b.n	800353a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003518:	4b44      	ldr	r3, [pc, #272]	; (800362c <UART_SetConfig+0x314>)
 800351a:	61fb      	str	r3, [r7, #28]
        break;
 800351c:	e00d      	b.n	800353a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800351e:	f7fe fe4d 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 8003522:	61f8      	str	r0, [r7, #28]
        break;
 8003524:	e009      	b.n	800353a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800352a:	61fb      	str	r3, [r7, #28]
        break;
 800352c:	e005      	b.n	800353a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003538:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 8107 	beq.w	8003750 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4413      	add	r3, r2
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	429a      	cmp	r2, r3
 8003550:	d305      	bcc.n	800355e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	429a      	cmp	r2, r3
 800355c:	d903      	bls.n	8003566 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003564:	e0f4      	b.n	8003750 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2200      	movs	r2, #0
 800356a:	461c      	mov	r4, r3
 800356c:	4615      	mov	r5, r2
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	022b      	lsls	r3, r5, #8
 8003578:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800357c:	0222      	lsls	r2, r4, #8
 800357e:	68f9      	ldr	r1, [r7, #12]
 8003580:	6849      	ldr	r1, [r1, #4]
 8003582:	0849      	lsrs	r1, r1, #1
 8003584:	2000      	movs	r0, #0
 8003586:	4688      	mov	r8, r1
 8003588:	4681      	mov	r9, r0
 800358a:	eb12 0a08 	adds.w	sl, r2, r8
 800358e:	eb43 0b09 	adc.w	fp, r3, r9
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035a0:	4650      	mov	r0, sl
 80035a2:	4659      	mov	r1, fp
 80035a4:	f7fc fe6c 	bl	8000280 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4613      	mov	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035b6:	d308      	bcc.n	80035ca <UART_SetConfig+0x2b2>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035be:	d204      	bcs.n	80035ca <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	60da      	str	r2, [r3, #12]
 80035c8:	e0c2      	b.n	8003750 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035d0:	e0be      	b.n	8003750 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035da:	d16a      	bne.n	80036b2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80035dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d834      	bhi.n	800364e <UART_SetConfig+0x336>
 80035e4:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <UART_SetConfig+0x2d4>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	08003611 	.word	0x08003611
 80035f0:	08003631 	.word	0x08003631
 80035f4:	08003639 	.word	0x08003639
 80035f8:	0800364f 	.word	0x0800364f
 80035fc:	0800363f 	.word	0x0800363f
 8003600:	0800364f 	.word	0x0800364f
 8003604:	0800364f 	.word	0x0800364f
 8003608:	0800364f 	.word	0x0800364f
 800360c:	08003647 	.word	0x08003647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003610:	f7fe fe6c 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8003614:	61f8      	str	r0, [r7, #28]
        break;
 8003616:	e020      	b.n	800365a <UART_SetConfig+0x342>
 8003618:	efff69f3 	.word	0xefff69f3
 800361c:	40008000 	.word	0x40008000
 8003620:	40013800 	.word	0x40013800
 8003624:	40021000 	.word	0x40021000
 8003628:	40004400 	.word	0x40004400
 800362c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003630:	f7fe fe72 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 8003634:	61f8      	str	r0, [r7, #28]
        break;
 8003636:	e010      	b.n	800365a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003638:	4b4c      	ldr	r3, [pc, #304]	; (800376c <UART_SetConfig+0x454>)
 800363a:	61fb      	str	r3, [r7, #28]
        break;
 800363c:	e00d      	b.n	800365a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800363e:	f7fe fdbd 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 8003642:	61f8      	str	r0, [r7, #28]
        break;
 8003644:	e009      	b.n	800365a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364a:	61fb      	str	r3, [r7, #28]
        break;
 800364c:	e005      	b.n	800365a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003658:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d077      	beq.n	8003750 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	005a      	lsls	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	441a      	add	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b0f      	cmp	r3, #15
 800367a:	d916      	bls.n	80036aa <UART_SetConfig+0x392>
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003682:	d212      	bcs.n	80036aa <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	b29b      	uxth	r3, r3
 8003688:	f023 030f 	bic.w	r3, r3, #15
 800368c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	b29b      	uxth	r3, r3
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	b29a      	uxth	r2, r3
 800369a:	8afb      	ldrh	r3, [r7, #22]
 800369c:	4313      	orrs	r3, r2
 800369e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	8afa      	ldrh	r2, [r7, #22]
 80036a6:	60da      	str	r2, [r3, #12]
 80036a8:	e052      	b.n	8003750 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036b0:	e04e      	b.n	8003750 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d827      	bhi.n	800370a <UART_SetConfig+0x3f2>
 80036ba:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <UART_SetConfig+0x3a8>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	080036e5 	.word	0x080036e5
 80036c4:	080036ed 	.word	0x080036ed
 80036c8:	080036f5 	.word	0x080036f5
 80036cc:	0800370b 	.word	0x0800370b
 80036d0:	080036fb 	.word	0x080036fb
 80036d4:	0800370b 	.word	0x0800370b
 80036d8:	0800370b 	.word	0x0800370b
 80036dc:	0800370b 	.word	0x0800370b
 80036e0:	08003703 	.word	0x08003703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e4:	f7fe fe02 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 80036e8:	61f8      	str	r0, [r7, #28]
        break;
 80036ea:	e014      	b.n	8003716 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036ec:	f7fe fe14 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 80036f0:	61f8      	str	r0, [r7, #28]
        break;
 80036f2:	e010      	b.n	8003716 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f4:	4b1d      	ldr	r3, [pc, #116]	; (800376c <UART_SetConfig+0x454>)
 80036f6:	61fb      	str	r3, [r7, #28]
        break;
 80036f8:	e00d      	b.n	8003716 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fa:	f7fe fd5f 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 80036fe:	61f8      	str	r0, [r7, #28]
        break;
 8003700:	e009      	b.n	8003716 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003706:	61fb      	str	r3, [r7, #28]
        break;
 8003708:	e005      	b.n	8003716 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003714:	bf00      	nop
    }

    if (pclk != 0U)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d019      	beq.n	8003750 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	085a      	lsrs	r2, r3, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	441a      	add	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	fbb2 f3f3 	udiv	r3, r2, r3
 800372e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	d909      	bls.n	800374a <UART_SetConfig+0x432>
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373c:	d205      	bcs.n	800374a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60da      	str	r2, [r3, #12]
 8003748:	e002      	b.n	8003750 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800375c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003760:	4618      	mov	r0, r3
 8003762:	3728      	adds	r7, #40	; 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800376a:	bf00      	nop
 800376c:	00f42400 	.word	0x00f42400

08003770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01a      	beq.n	8003886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800386e:	d10a      	bne.n	8003886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	605a      	str	r2, [r3, #4]
  }
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038c4:	f7fd fc2e 	bl	8001124 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d10e      	bne.n	80038f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f82d 	bl	8003946 <UART_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e023      	b.n	800393e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b04      	cmp	r3, #4
 8003902:	d10e      	bne.n	8003922 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f817 	bl	8003946 <UART_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e00d      	b.n	800393e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b09c      	sub	sp, #112	; 0x70
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	4613      	mov	r3, r2
 8003954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003956:	e0a5      	b.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800395a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395e:	f000 80a1 	beq.w	8003aa4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003962:	f7fd fbdf 	bl	8001124 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800396e:	429a      	cmp	r2, r3
 8003970:	d302      	bcc.n	8003978 <UART_WaitOnFlagUntilTimeout+0x32>
 8003972:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003974:	2b00      	cmp	r3, #0
 8003976:	d13e      	bne.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003988:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800398c:	667b      	str	r3, [r7, #100]	; 0x64
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003998:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800399c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1e6      	bne.n	8003978 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3308      	adds	r3, #8
 80039b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039bc:	f023 0301 	bic.w	r3, r3, #1
 80039c0:	663b      	str	r3, [r7, #96]	; 0x60
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3308      	adds	r3, #8
 80039c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80039cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e5      	bne.n	80039aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e067      	b.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d04f      	beq.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a12:	d147      	bne.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a1c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	e853 3f00 	ldrex	r3, [r3]
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e6      	bne.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3308      	adds	r3, #8
 8003a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a70:	623a      	str	r2, [r7, #32]
 8003a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	69f9      	ldr	r1, [r7, #28]
 8003a76:	6a3a      	ldr	r2, [r7, #32]
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e5      	bne.n	8003a50 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e010      	b.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4013      	ands	r3, r2
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	f43f af4a 	beq.w	8003958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3770      	adds	r7, #112	; 0x70
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <__errno>:
 8003ad0:	4b01      	ldr	r3, [pc, #4]	; (8003ad8 <__errno+0x8>)
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	2000000c 	.word	0x2000000c

08003adc <__libc_init_array>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	4d0d      	ldr	r5, [pc, #52]	; (8003b14 <__libc_init_array+0x38>)
 8003ae0:	4c0d      	ldr	r4, [pc, #52]	; (8003b18 <__libc_init_array+0x3c>)
 8003ae2:	1b64      	subs	r4, r4, r5
 8003ae4:	10a4      	asrs	r4, r4, #2
 8003ae6:	2600      	movs	r6, #0
 8003ae8:	42a6      	cmp	r6, r4
 8003aea:	d109      	bne.n	8003b00 <__libc_init_array+0x24>
 8003aec:	4d0b      	ldr	r5, [pc, #44]	; (8003b1c <__libc_init_array+0x40>)
 8003aee:	4c0c      	ldr	r4, [pc, #48]	; (8003b20 <__libc_init_array+0x44>)
 8003af0:	f000 fe20 	bl	8004734 <_init>
 8003af4:	1b64      	subs	r4, r4, r5
 8003af6:	10a4      	asrs	r4, r4, #2
 8003af8:	2600      	movs	r6, #0
 8003afa:	42a6      	cmp	r6, r4
 8003afc:	d105      	bne.n	8003b0a <__libc_init_array+0x2e>
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
 8003b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b04:	4798      	blx	r3
 8003b06:	3601      	adds	r6, #1
 8003b08:	e7ee      	b.n	8003ae8 <__libc_init_array+0xc>
 8003b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0e:	4798      	blx	r3
 8003b10:	3601      	adds	r6, #1
 8003b12:	e7f2      	b.n	8003afa <__libc_init_array+0x1e>
 8003b14:	08004934 	.word	0x08004934
 8003b18:	08004934 	.word	0x08004934
 8003b1c:	08004934 	.word	0x08004934
 8003b20:	08004938 	.word	0x08004938

08003b24 <memcpy>:
 8003b24:	440a      	add	r2, r1
 8003b26:	4291      	cmp	r1, r2
 8003b28:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b2c:	d100      	bne.n	8003b30 <memcpy+0xc>
 8003b2e:	4770      	bx	lr
 8003b30:	b510      	push	{r4, lr}
 8003b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b3a:	4291      	cmp	r1, r2
 8003b3c:	d1f9      	bne.n	8003b32 <memcpy+0xe>
 8003b3e:	bd10      	pop	{r4, pc}

08003b40 <memset>:
 8003b40:	4402      	add	r2, r0
 8003b42:	4603      	mov	r3, r0
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d100      	bne.n	8003b4a <memset+0xa>
 8003b48:	4770      	bx	lr
 8003b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b4e:	e7f9      	b.n	8003b44 <memset+0x4>

08003b50 <siscanf>:
 8003b50:	b40e      	push	{r1, r2, r3}
 8003b52:	b510      	push	{r4, lr}
 8003b54:	b09f      	sub	sp, #124	; 0x7c
 8003b56:	ac21      	add	r4, sp, #132	; 0x84
 8003b58:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003b5c:	f854 2b04 	ldr.w	r2, [r4], #4
 8003b60:	9201      	str	r2, [sp, #4]
 8003b62:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003b66:	9004      	str	r0, [sp, #16]
 8003b68:	9008      	str	r0, [sp, #32]
 8003b6a:	f7fc fb31 	bl	80001d0 <strlen>
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <siscanf+0x50>)
 8003b70:	9005      	str	r0, [sp, #20]
 8003b72:	9009      	str	r0, [sp, #36]	; 0x24
 8003b74:	930d      	str	r3, [sp, #52]	; 0x34
 8003b76:	480b      	ldr	r0, [pc, #44]	; (8003ba4 <siscanf+0x54>)
 8003b78:	9a01      	ldr	r2, [sp, #4]
 8003b7a:	6800      	ldr	r0, [r0, #0]
 8003b7c:	9403      	str	r4, [sp, #12]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9311      	str	r3, [sp, #68]	; 0x44
 8003b82:	9316      	str	r3, [sp, #88]	; 0x58
 8003b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b88:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003b8c:	a904      	add	r1, sp, #16
 8003b8e:	4623      	mov	r3, r4
 8003b90:	f000 f866 	bl	8003c60 <__ssvfiscanf_r>
 8003b94:	b01f      	add	sp, #124	; 0x7c
 8003b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b9a:	b003      	add	sp, #12
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	08003ba9 	.word	0x08003ba9
 8003ba4:	2000000c 	.word	0x2000000c

08003ba8 <__seofread>:
 8003ba8:	2000      	movs	r0, #0
 8003baa:	4770      	bx	lr

08003bac <_sungetc_r>:
 8003bac:	b538      	push	{r3, r4, r5, lr}
 8003bae:	1c4b      	adds	r3, r1, #1
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	d103      	bne.n	8003bbc <_sungetc_r+0x10>
 8003bb4:	f04f 35ff 	mov.w	r5, #4294967295
 8003bb8:	4628      	mov	r0, r5
 8003bba:	bd38      	pop	{r3, r4, r5, pc}
 8003bbc:	8993      	ldrh	r3, [r2, #12]
 8003bbe:	f023 0320 	bic.w	r3, r3, #32
 8003bc2:	8193      	strh	r3, [r2, #12]
 8003bc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bc6:	6852      	ldr	r2, [r2, #4]
 8003bc8:	b2cd      	uxtb	r5, r1
 8003bca:	b18b      	cbz	r3, 8003bf0 <_sungetc_r+0x44>
 8003bcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	dd08      	ble.n	8003be4 <_sungetc_r+0x38>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	1e5a      	subs	r2, r3, #1
 8003bd6:	6022      	str	r2, [r4, #0]
 8003bd8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003bdc:	6863      	ldr	r3, [r4, #4]
 8003bde:	3301      	adds	r3, #1
 8003be0:	6063      	str	r3, [r4, #4]
 8003be2:	e7e9      	b.n	8003bb8 <_sungetc_r+0xc>
 8003be4:	4621      	mov	r1, r4
 8003be6:	f000 fc35 	bl	8004454 <__submore>
 8003bea:	2800      	cmp	r0, #0
 8003bec:	d0f1      	beq.n	8003bd2 <_sungetc_r+0x26>
 8003bee:	e7e1      	b.n	8003bb4 <_sungetc_r+0x8>
 8003bf0:	6921      	ldr	r1, [r4, #16]
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	b151      	cbz	r1, 8003c0c <_sungetc_r+0x60>
 8003bf6:	4299      	cmp	r1, r3
 8003bf8:	d208      	bcs.n	8003c0c <_sungetc_r+0x60>
 8003bfa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003bfe:	42a9      	cmp	r1, r5
 8003c00:	d104      	bne.n	8003c0c <_sungetc_r+0x60>
 8003c02:	3b01      	subs	r3, #1
 8003c04:	3201      	adds	r2, #1
 8003c06:	6023      	str	r3, [r4, #0]
 8003c08:	6062      	str	r2, [r4, #4]
 8003c0a:	e7d5      	b.n	8003bb8 <_sungetc_r+0xc>
 8003c0c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c14:	6363      	str	r3, [r4, #52]	; 0x34
 8003c16:	2303      	movs	r3, #3
 8003c18:	63a3      	str	r3, [r4, #56]	; 0x38
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003c20:	6023      	str	r3, [r4, #0]
 8003c22:	2301      	movs	r3, #1
 8003c24:	e7dc      	b.n	8003be0 <_sungetc_r+0x34>

08003c26 <__ssrefill_r>:
 8003c26:	b510      	push	{r4, lr}
 8003c28:	460c      	mov	r4, r1
 8003c2a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003c2c:	b169      	cbz	r1, 8003c4a <__ssrefill_r+0x24>
 8003c2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c32:	4299      	cmp	r1, r3
 8003c34:	d001      	beq.n	8003c3a <__ssrefill_r+0x14>
 8003c36:	f000 fc49 	bl	80044cc <_free_r>
 8003c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c3c:	6063      	str	r3, [r4, #4]
 8003c3e:	2000      	movs	r0, #0
 8003c40:	6360      	str	r0, [r4, #52]	; 0x34
 8003c42:	b113      	cbz	r3, 8003c4a <__ssrefill_r+0x24>
 8003c44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c46:	6023      	str	r3, [r4, #0]
 8003c48:	bd10      	pop	{r4, pc}
 8003c4a:	6923      	ldr	r3, [r4, #16]
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	6063      	str	r3, [r4, #4]
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	f043 0320 	orr.w	r3, r3, #32
 8003c58:	81a3      	strh	r3, [r4, #12]
 8003c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5e:	e7f3      	b.n	8003c48 <__ssrefill_r+0x22>

08003c60 <__ssvfiscanf_r>:
 8003c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c64:	460c      	mov	r4, r1
 8003c66:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003c70:	49a6      	ldr	r1, [pc, #664]	; (8003f0c <__ssvfiscanf_r+0x2ac>)
 8003c72:	91a0      	str	r1, [sp, #640]	; 0x280
 8003c74:	f10d 0804 	add.w	r8, sp, #4
 8003c78:	49a5      	ldr	r1, [pc, #660]	; (8003f10 <__ssvfiscanf_r+0x2b0>)
 8003c7a:	4fa6      	ldr	r7, [pc, #664]	; (8003f14 <__ssvfiscanf_r+0x2b4>)
 8003c7c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003f18 <__ssvfiscanf_r+0x2b8>
 8003c80:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003c84:	4606      	mov	r6, r0
 8003c86:	91a1      	str	r1, [sp, #644]	; 0x284
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	7813      	ldrb	r3, [r2, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 815a 	beq.w	8003f46 <__ssvfiscanf_r+0x2e6>
 8003c92:	5dd9      	ldrb	r1, [r3, r7]
 8003c94:	f011 0108 	ands.w	r1, r1, #8
 8003c98:	f102 0501 	add.w	r5, r2, #1
 8003c9c:	d019      	beq.n	8003cd2 <__ssvfiscanf_r+0x72>
 8003c9e:	6863      	ldr	r3, [r4, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	dd0f      	ble.n	8003cc4 <__ssvfiscanf_r+0x64>
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	5cba      	ldrb	r2, [r7, r2]
 8003caa:	0712      	lsls	r2, r2, #28
 8003cac:	d401      	bmi.n	8003cb2 <__ssvfiscanf_r+0x52>
 8003cae:	462a      	mov	r2, r5
 8003cb0:	e7eb      	b.n	8003c8a <__ssvfiscanf_r+0x2a>
 8003cb2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003cb4:	3201      	adds	r2, #1
 8003cb6:	9245      	str	r2, [sp, #276]	; 0x114
 8003cb8:	6862      	ldr	r2, [r4, #4]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	3a01      	subs	r2, #1
 8003cbe:	6062      	str	r2, [r4, #4]
 8003cc0:	6023      	str	r3, [r4, #0]
 8003cc2:	e7ec      	b.n	8003c9e <__ssvfiscanf_r+0x3e>
 8003cc4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	4630      	mov	r0, r6
 8003cca:	4798      	blx	r3
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d0e9      	beq.n	8003ca4 <__ssvfiscanf_r+0x44>
 8003cd0:	e7ed      	b.n	8003cae <__ssvfiscanf_r+0x4e>
 8003cd2:	2b25      	cmp	r3, #37	; 0x25
 8003cd4:	d012      	beq.n	8003cfc <__ssvfiscanf_r+0x9c>
 8003cd6:	469a      	mov	sl, r3
 8003cd8:	6863      	ldr	r3, [r4, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f340 8091 	ble.w	8003e02 <__ssvfiscanf_r+0x1a2>
 8003ce0:	6822      	ldr	r2, [r4, #0]
 8003ce2:	7813      	ldrb	r3, [r2, #0]
 8003ce4:	4553      	cmp	r3, sl
 8003ce6:	f040 812e 	bne.w	8003f46 <__ssvfiscanf_r+0x2e6>
 8003cea:	6863      	ldr	r3, [r4, #4]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	6063      	str	r3, [r4, #4]
 8003cf0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003cf2:	3201      	adds	r2, #1
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	6022      	str	r2, [r4, #0]
 8003cf8:	9345      	str	r3, [sp, #276]	; 0x114
 8003cfa:	e7d8      	b.n	8003cae <__ssvfiscanf_r+0x4e>
 8003cfc:	9141      	str	r1, [sp, #260]	; 0x104
 8003cfe:	9143      	str	r1, [sp, #268]	; 0x10c
 8003d00:	7853      	ldrb	r3, [r2, #1]
 8003d02:	2b2a      	cmp	r3, #42	; 0x2a
 8003d04:	bf02      	ittt	eq
 8003d06:	2310      	moveq	r3, #16
 8003d08:	1c95      	addeq	r5, r2, #2
 8003d0a:	9341      	streq	r3, [sp, #260]	; 0x104
 8003d0c:	220a      	movs	r2, #10
 8003d0e:	46aa      	mov	sl, r5
 8003d10:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003d14:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003d18:	2b09      	cmp	r3, #9
 8003d1a:	d91d      	bls.n	8003d58 <__ssvfiscanf_r+0xf8>
 8003d1c:	487e      	ldr	r0, [pc, #504]	; (8003f18 <__ssvfiscanf_r+0x2b8>)
 8003d1e:	2203      	movs	r2, #3
 8003d20:	f7fc fa5e 	bl	80001e0 <memchr>
 8003d24:	b140      	cbz	r0, 8003d38 <__ssvfiscanf_r+0xd8>
 8003d26:	2301      	movs	r3, #1
 8003d28:	eba0 0009 	sub.w	r0, r0, r9
 8003d2c:	fa03 f000 	lsl.w	r0, r3, r0
 8003d30:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003d32:	4318      	orrs	r0, r3
 8003d34:	9041      	str	r0, [sp, #260]	; 0x104
 8003d36:	4655      	mov	r5, sl
 8003d38:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d3c:	2b78      	cmp	r3, #120	; 0x78
 8003d3e:	d806      	bhi.n	8003d4e <__ssvfiscanf_r+0xee>
 8003d40:	2b57      	cmp	r3, #87	; 0x57
 8003d42:	d810      	bhi.n	8003d66 <__ssvfiscanf_r+0x106>
 8003d44:	2b25      	cmp	r3, #37	; 0x25
 8003d46:	d0c6      	beq.n	8003cd6 <__ssvfiscanf_r+0x76>
 8003d48:	d856      	bhi.n	8003df8 <__ssvfiscanf_r+0x198>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d064      	beq.n	8003e18 <__ssvfiscanf_r+0x1b8>
 8003d4e:	2303      	movs	r3, #3
 8003d50:	9347      	str	r3, [sp, #284]	; 0x11c
 8003d52:	230a      	movs	r3, #10
 8003d54:	9342      	str	r3, [sp, #264]	; 0x108
 8003d56:	e071      	b.n	8003e3c <__ssvfiscanf_r+0x1dc>
 8003d58:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003d5a:	fb02 1103 	mla	r1, r2, r3, r1
 8003d5e:	3930      	subs	r1, #48	; 0x30
 8003d60:	9143      	str	r1, [sp, #268]	; 0x10c
 8003d62:	4655      	mov	r5, sl
 8003d64:	e7d3      	b.n	8003d0e <__ssvfiscanf_r+0xae>
 8003d66:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003d6a:	2a20      	cmp	r2, #32
 8003d6c:	d8ef      	bhi.n	8003d4e <__ssvfiscanf_r+0xee>
 8003d6e:	a101      	add	r1, pc, #4	; (adr r1, 8003d74 <__ssvfiscanf_r+0x114>)
 8003d70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003d74:	08003e27 	.word	0x08003e27
 8003d78:	08003d4f 	.word	0x08003d4f
 8003d7c:	08003d4f 	.word	0x08003d4f
 8003d80:	08003e85 	.word	0x08003e85
 8003d84:	08003d4f 	.word	0x08003d4f
 8003d88:	08003d4f 	.word	0x08003d4f
 8003d8c:	08003d4f 	.word	0x08003d4f
 8003d90:	08003d4f 	.word	0x08003d4f
 8003d94:	08003d4f 	.word	0x08003d4f
 8003d98:	08003d4f 	.word	0x08003d4f
 8003d9c:	08003d4f 	.word	0x08003d4f
 8003da0:	08003e9b 	.word	0x08003e9b
 8003da4:	08003e71 	.word	0x08003e71
 8003da8:	08003dff 	.word	0x08003dff
 8003dac:	08003dff 	.word	0x08003dff
 8003db0:	08003dff 	.word	0x08003dff
 8003db4:	08003d4f 	.word	0x08003d4f
 8003db8:	08003e75 	.word	0x08003e75
 8003dbc:	08003d4f 	.word	0x08003d4f
 8003dc0:	08003d4f 	.word	0x08003d4f
 8003dc4:	08003d4f 	.word	0x08003d4f
 8003dc8:	08003d4f 	.word	0x08003d4f
 8003dcc:	08003eab 	.word	0x08003eab
 8003dd0:	08003e7d 	.word	0x08003e7d
 8003dd4:	08003e1f 	.word	0x08003e1f
 8003dd8:	08003d4f 	.word	0x08003d4f
 8003ddc:	08003d4f 	.word	0x08003d4f
 8003de0:	08003ea7 	.word	0x08003ea7
 8003de4:	08003d4f 	.word	0x08003d4f
 8003de8:	08003e71 	.word	0x08003e71
 8003dec:	08003d4f 	.word	0x08003d4f
 8003df0:	08003d4f 	.word	0x08003d4f
 8003df4:	08003e27 	.word	0x08003e27
 8003df8:	3b45      	subs	r3, #69	; 0x45
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d8a7      	bhi.n	8003d4e <__ssvfiscanf_r+0xee>
 8003dfe:	2305      	movs	r3, #5
 8003e00:	e01b      	b.n	8003e3a <__ssvfiscanf_r+0x1da>
 8003e02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003e04:	4621      	mov	r1, r4
 8003e06:	4630      	mov	r0, r6
 8003e08:	4798      	blx	r3
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	f43f af68 	beq.w	8003ce0 <__ssvfiscanf_r+0x80>
 8003e10:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003e12:	2800      	cmp	r0, #0
 8003e14:	f040 808d 	bne.w	8003f32 <__ssvfiscanf_r+0x2d2>
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	e08f      	b.n	8003f3e <__ssvfiscanf_r+0x2de>
 8003e1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003e20:	f042 0220 	orr.w	r2, r2, #32
 8003e24:	9241      	str	r2, [sp, #260]	; 0x104
 8003e26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2c:	9241      	str	r2, [sp, #260]	; 0x104
 8003e2e:	2210      	movs	r2, #16
 8003e30:	2b6f      	cmp	r3, #111	; 0x6f
 8003e32:	9242      	str	r2, [sp, #264]	; 0x108
 8003e34:	bf34      	ite	cc
 8003e36:	2303      	movcc	r3, #3
 8003e38:	2304      	movcs	r3, #4
 8003e3a:	9347      	str	r3, [sp, #284]	; 0x11c
 8003e3c:	6863      	ldr	r3, [r4, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	dd42      	ble.n	8003ec8 <__ssvfiscanf_r+0x268>
 8003e42:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003e44:	0659      	lsls	r1, r3, #25
 8003e46:	d404      	bmi.n	8003e52 <__ssvfiscanf_r+0x1f2>
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	5cba      	ldrb	r2, [r7, r2]
 8003e4e:	0712      	lsls	r2, r2, #28
 8003e50:	d441      	bmi.n	8003ed6 <__ssvfiscanf_r+0x276>
 8003e52:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	dc50      	bgt.n	8003efa <__ssvfiscanf_r+0x29a>
 8003e58:	466b      	mov	r3, sp
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	a941      	add	r1, sp, #260	; 0x104
 8003e5e:	4630      	mov	r0, r6
 8003e60:	f000 f876 	bl	8003f50 <_scanf_chars>
 8003e64:	2801      	cmp	r0, #1
 8003e66:	d06e      	beq.n	8003f46 <__ssvfiscanf_r+0x2e6>
 8003e68:	2802      	cmp	r0, #2
 8003e6a:	f47f af20 	bne.w	8003cae <__ssvfiscanf_r+0x4e>
 8003e6e:	e7cf      	b.n	8003e10 <__ssvfiscanf_r+0x1b0>
 8003e70:	220a      	movs	r2, #10
 8003e72:	e7dd      	b.n	8003e30 <__ssvfiscanf_r+0x1d0>
 8003e74:	2300      	movs	r3, #0
 8003e76:	9342      	str	r3, [sp, #264]	; 0x108
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e7de      	b.n	8003e3a <__ssvfiscanf_r+0x1da>
 8003e7c:	2308      	movs	r3, #8
 8003e7e:	9342      	str	r3, [sp, #264]	; 0x108
 8003e80:	2304      	movs	r3, #4
 8003e82:	e7da      	b.n	8003e3a <__ssvfiscanf_r+0x1da>
 8003e84:	4629      	mov	r1, r5
 8003e86:	4640      	mov	r0, r8
 8003e88:	f000 f9b4 	bl	80041f4 <__sccl>
 8003e8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e92:	9341      	str	r3, [sp, #260]	; 0x104
 8003e94:	4605      	mov	r5, r0
 8003e96:	2301      	movs	r3, #1
 8003e98:	e7cf      	b.n	8003e3a <__ssvfiscanf_r+0x1da>
 8003e9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ea0:	9341      	str	r3, [sp, #260]	; 0x104
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e7c9      	b.n	8003e3a <__ssvfiscanf_r+0x1da>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e7c7      	b.n	8003e3a <__ssvfiscanf_r+0x1da>
 8003eaa:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003eac:	06c3      	lsls	r3, r0, #27
 8003eae:	f53f aefe 	bmi.w	8003cae <__ssvfiscanf_r+0x4e>
 8003eb2:	9b00      	ldr	r3, [sp, #0]
 8003eb4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003eb6:	1d19      	adds	r1, r3, #4
 8003eb8:	9100      	str	r1, [sp, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f010 0f01 	tst.w	r0, #1
 8003ec0:	bf14      	ite	ne
 8003ec2:	801a      	strhne	r2, [r3, #0]
 8003ec4:	601a      	streq	r2, [r3, #0]
 8003ec6:	e6f2      	b.n	8003cae <__ssvfiscanf_r+0x4e>
 8003ec8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4630      	mov	r0, r6
 8003ece:	4798      	blx	r3
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d0b6      	beq.n	8003e42 <__ssvfiscanf_r+0x1e2>
 8003ed4:	e79c      	b.n	8003e10 <__ssvfiscanf_r+0x1b0>
 8003ed6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003ed8:	3201      	adds	r2, #1
 8003eda:	9245      	str	r2, [sp, #276]	; 0x114
 8003edc:	6862      	ldr	r2, [r4, #4]
 8003ede:	3a01      	subs	r2, #1
 8003ee0:	2a00      	cmp	r2, #0
 8003ee2:	6062      	str	r2, [r4, #4]
 8003ee4:	dd02      	ble.n	8003eec <__ssvfiscanf_r+0x28c>
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	6023      	str	r3, [r4, #0]
 8003eea:	e7ad      	b.n	8003e48 <__ssvfiscanf_r+0x1e8>
 8003eec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003eee:	4621      	mov	r1, r4
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	4798      	blx	r3
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d0a7      	beq.n	8003e48 <__ssvfiscanf_r+0x1e8>
 8003ef8:	e78a      	b.n	8003e10 <__ssvfiscanf_r+0x1b0>
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	dc0e      	bgt.n	8003f1c <__ssvfiscanf_r+0x2bc>
 8003efe:	466b      	mov	r3, sp
 8003f00:	4622      	mov	r2, r4
 8003f02:	a941      	add	r1, sp, #260	; 0x104
 8003f04:	4630      	mov	r0, r6
 8003f06:	f000 f87d 	bl	8004004 <_scanf_i>
 8003f0a:	e7ab      	b.n	8003e64 <__ssvfiscanf_r+0x204>
 8003f0c:	08003bad 	.word	0x08003bad
 8003f10:	08003c27 	.word	0x08003c27
 8003f14:	080047cc 	.word	0x080047cc
 8003f18:	080047ac 	.word	0x080047ac
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <__ssvfiscanf_r+0x2ec>)
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f43f aec5 	beq.w	8003cae <__ssvfiscanf_r+0x4e>
 8003f24:	466b      	mov	r3, sp
 8003f26:	4622      	mov	r2, r4
 8003f28:	a941      	add	r1, sp, #260	; 0x104
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	f3af 8000 	nop.w
 8003f30:	e798      	b.n	8003e64 <__ssvfiscanf_r+0x204>
 8003f32:	89a3      	ldrh	r3, [r4, #12]
 8003f34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f38:	bf18      	it	ne
 8003f3a:	f04f 30ff 	movne.w	r0, #4294967295
 8003f3e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f46:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003f48:	e7f9      	b.n	8003f3e <__ssvfiscanf_r+0x2de>
 8003f4a:	bf00      	nop
 8003f4c:	00000000 	.word	0x00000000

08003f50 <_scanf_chars>:
 8003f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f54:	4615      	mov	r5, r2
 8003f56:	688a      	ldr	r2, [r1, #8]
 8003f58:	4680      	mov	r8, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	b932      	cbnz	r2, 8003f6c <_scanf_chars+0x1c>
 8003f5e:	698a      	ldr	r2, [r1, #24]
 8003f60:	2a00      	cmp	r2, #0
 8003f62:	bf0c      	ite	eq
 8003f64:	2201      	moveq	r2, #1
 8003f66:	f04f 32ff 	movne.w	r2, #4294967295
 8003f6a:	608a      	str	r2, [r1, #8]
 8003f6c:	6822      	ldr	r2, [r4, #0]
 8003f6e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004000 <_scanf_chars+0xb0>
 8003f72:	06d1      	lsls	r1, r2, #27
 8003f74:	bf5f      	itttt	pl
 8003f76:	681a      	ldrpl	r2, [r3, #0]
 8003f78:	1d11      	addpl	r1, r2, #4
 8003f7a:	6019      	strpl	r1, [r3, #0]
 8003f7c:	6816      	ldrpl	r6, [r2, #0]
 8003f7e:	2700      	movs	r7, #0
 8003f80:	69a0      	ldr	r0, [r4, #24]
 8003f82:	b188      	cbz	r0, 8003fa8 <_scanf_chars+0x58>
 8003f84:	2801      	cmp	r0, #1
 8003f86:	d107      	bne.n	8003f98 <_scanf_chars+0x48>
 8003f88:	682a      	ldr	r2, [r5, #0]
 8003f8a:	7811      	ldrb	r1, [r2, #0]
 8003f8c:	6962      	ldr	r2, [r4, #20]
 8003f8e:	5c52      	ldrb	r2, [r2, r1]
 8003f90:	b952      	cbnz	r2, 8003fa8 <_scanf_chars+0x58>
 8003f92:	2f00      	cmp	r7, #0
 8003f94:	d031      	beq.n	8003ffa <_scanf_chars+0xaa>
 8003f96:	e022      	b.n	8003fde <_scanf_chars+0x8e>
 8003f98:	2802      	cmp	r0, #2
 8003f9a:	d120      	bne.n	8003fde <_scanf_chars+0x8e>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003fa4:	071b      	lsls	r3, r3, #28
 8003fa6:	d41a      	bmi.n	8003fde <_scanf_chars+0x8e>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	06da      	lsls	r2, r3, #27
 8003fac:	bf5e      	ittt	pl
 8003fae:	682b      	ldrpl	r3, [r5, #0]
 8003fb0:	781b      	ldrbpl	r3, [r3, #0]
 8003fb2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003fb6:	682a      	ldr	r2, [r5, #0]
 8003fb8:	686b      	ldr	r3, [r5, #4]
 8003fba:	3201      	adds	r2, #1
 8003fbc:	602a      	str	r2, [r5, #0]
 8003fbe:	68a2      	ldr	r2, [r4, #8]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	3a01      	subs	r2, #1
 8003fc4:	606b      	str	r3, [r5, #4]
 8003fc6:	3701      	adds	r7, #1
 8003fc8:	60a2      	str	r2, [r4, #8]
 8003fca:	b142      	cbz	r2, 8003fde <_scanf_chars+0x8e>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	dcd7      	bgt.n	8003f80 <_scanf_chars+0x30>
 8003fd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	4640      	mov	r0, r8
 8003fd8:	4798      	blx	r3
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d0d0      	beq.n	8003f80 <_scanf_chars+0x30>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	f013 0310 	ands.w	r3, r3, #16
 8003fe4:	d105      	bne.n	8003ff2 <_scanf_chars+0xa2>
 8003fe6:	68e2      	ldr	r2, [r4, #12]
 8003fe8:	3201      	adds	r2, #1
 8003fea:	60e2      	str	r2, [r4, #12]
 8003fec:	69a2      	ldr	r2, [r4, #24]
 8003fee:	b102      	cbz	r2, 8003ff2 <_scanf_chars+0xa2>
 8003ff0:	7033      	strb	r3, [r6, #0]
 8003ff2:	6923      	ldr	r3, [r4, #16]
 8003ff4:	443b      	add	r3, r7
 8003ff6:	6123      	str	r3, [r4, #16]
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ffe:	bf00      	nop
 8004000:	080047cc 	.word	0x080047cc

08004004 <_scanf_i>:
 8004004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004008:	4698      	mov	r8, r3
 800400a:	4b76      	ldr	r3, [pc, #472]	; (80041e4 <_scanf_i+0x1e0>)
 800400c:	460c      	mov	r4, r1
 800400e:	4682      	mov	sl, r0
 8004010:	4616      	mov	r6, r2
 8004012:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004016:	b087      	sub	sp, #28
 8004018:	ab03      	add	r3, sp, #12
 800401a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800401e:	4b72      	ldr	r3, [pc, #456]	; (80041e8 <_scanf_i+0x1e4>)
 8004020:	69a1      	ldr	r1, [r4, #24]
 8004022:	4a72      	ldr	r2, [pc, #456]	; (80041ec <_scanf_i+0x1e8>)
 8004024:	2903      	cmp	r1, #3
 8004026:	bf18      	it	ne
 8004028:	461a      	movne	r2, r3
 800402a:	68a3      	ldr	r3, [r4, #8]
 800402c:	9201      	str	r2, [sp, #4]
 800402e:	1e5a      	subs	r2, r3, #1
 8004030:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004034:	bf88      	it	hi
 8004036:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800403a:	4627      	mov	r7, r4
 800403c:	bf82      	ittt	hi
 800403e:	eb03 0905 	addhi.w	r9, r3, r5
 8004042:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004046:	60a3      	strhi	r3, [r4, #8]
 8004048:	f857 3b1c 	ldr.w	r3, [r7], #28
 800404c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004050:	bf98      	it	ls
 8004052:	f04f 0900 	movls.w	r9, #0
 8004056:	6023      	str	r3, [r4, #0]
 8004058:	463d      	mov	r5, r7
 800405a:	f04f 0b00 	mov.w	fp, #0
 800405e:	6831      	ldr	r1, [r6, #0]
 8004060:	ab03      	add	r3, sp, #12
 8004062:	7809      	ldrb	r1, [r1, #0]
 8004064:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004068:	2202      	movs	r2, #2
 800406a:	f7fc f8b9 	bl	80001e0 <memchr>
 800406e:	b328      	cbz	r0, 80040bc <_scanf_i+0xb8>
 8004070:	f1bb 0f01 	cmp.w	fp, #1
 8004074:	d159      	bne.n	800412a <_scanf_i+0x126>
 8004076:	6862      	ldr	r2, [r4, #4]
 8004078:	b92a      	cbnz	r2, 8004086 <_scanf_i+0x82>
 800407a:	6822      	ldr	r2, [r4, #0]
 800407c:	2308      	movs	r3, #8
 800407e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004082:	6063      	str	r3, [r4, #4]
 8004084:	6022      	str	r2, [r4, #0]
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800408c:	6022      	str	r2, [r4, #0]
 800408e:	68a2      	ldr	r2, [r4, #8]
 8004090:	1e51      	subs	r1, r2, #1
 8004092:	60a1      	str	r1, [r4, #8]
 8004094:	b192      	cbz	r2, 80040bc <_scanf_i+0xb8>
 8004096:	6832      	ldr	r2, [r6, #0]
 8004098:	1c51      	adds	r1, r2, #1
 800409a:	6031      	str	r1, [r6, #0]
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	f805 2b01 	strb.w	r2, [r5], #1
 80040a2:	6872      	ldr	r2, [r6, #4]
 80040a4:	3a01      	subs	r2, #1
 80040a6:	2a00      	cmp	r2, #0
 80040a8:	6072      	str	r2, [r6, #4]
 80040aa:	dc07      	bgt.n	80040bc <_scanf_i+0xb8>
 80040ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80040b0:	4631      	mov	r1, r6
 80040b2:	4650      	mov	r0, sl
 80040b4:	4790      	blx	r2
 80040b6:	2800      	cmp	r0, #0
 80040b8:	f040 8085 	bne.w	80041c6 <_scanf_i+0x1c2>
 80040bc:	f10b 0b01 	add.w	fp, fp, #1
 80040c0:	f1bb 0f03 	cmp.w	fp, #3
 80040c4:	d1cb      	bne.n	800405e <_scanf_i+0x5a>
 80040c6:	6863      	ldr	r3, [r4, #4]
 80040c8:	b90b      	cbnz	r3, 80040ce <_scanf_i+0xca>
 80040ca:	230a      	movs	r3, #10
 80040cc:	6063      	str	r3, [r4, #4]
 80040ce:	6863      	ldr	r3, [r4, #4]
 80040d0:	4947      	ldr	r1, [pc, #284]	; (80041f0 <_scanf_i+0x1ec>)
 80040d2:	6960      	ldr	r0, [r4, #20]
 80040d4:	1ac9      	subs	r1, r1, r3
 80040d6:	f000 f88d 	bl	80041f4 <__sccl>
 80040da:	f04f 0b00 	mov.w	fp, #0
 80040de:	68a3      	ldr	r3, [r4, #8]
 80040e0:	6822      	ldr	r2, [r4, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d03d      	beq.n	8004162 <_scanf_i+0x15e>
 80040e6:	6831      	ldr	r1, [r6, #0]
 80040e8:	6960      	ldr	r0, [r4, #20]
 80040ea:	f891 c000 	ldrb.w	ip, [r1]
 80040ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d035      	beq.n	8004162 <_scanf_i+0x15e>
 80040f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80040fa:	d124      	bne.n	8004146 <_scanf_i+0x142>
 80040fc:	0510      	lsls	r0, r2, #20
 80040fe:	d522      	bpl.n	8004146 <_scanf_i+0x142>
 8004100:	f10b 0b01 	add.w	fp, fp, #1
 8004104:	f1b9 0f00 	cmp.w	r9, #0
 8004108:	d003      	beq.n	8004112 <_scanf_i+0x10e>
 800410a:	3301      	adds	r3, #1
 800410c:	f109 39ff 	add.w	r9, r9, #4294967295
 8004110:	60a3      	str	r3, [r4, #8]
 8004112:	6873      	ldr	r3, [r6, #4]
 8004114:	3b01      	subs	r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	6073      	str	r3, [r6, #4]
 800411a:	dd1b      	ble.n	8004154 <_scanf_i+0x150>
 800411c:	6833      	ldr	r3, [r6, #0]
 800411e:	3301      	adds	r3, #1
 8004120:	6033      	str	r3, [r6, #0]
 8004122:	68a3      	ldr	r3, [r4, #8]
 8004124:	3b01      	subs	r3, #1
 8004126:	60a3      	str	r3, [r4, #8]
 8004128:	e7d9      	b.n	80040de <_scanf_i+0xda>
 800412a:	f1bb 0f02 	cmp.w	fp, #2
 800412e:	d1ae      	bne.n	800408e <_scanf_i+0x8a>
 8004130:	6822      	ldr	r2, [r4, #0]
 8004132:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004136:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800413a:	d1bf      	bne.n	80040bc <_scanf_i+0xb8>
 800413c:	2310      	movs	r3, #16
 800413e:	6063      	str	r3, [r4, #4]
 8004140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004144:	e7a2      	b.n	800408c <_scanf_i+0x88>
 8004146:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800414a:	6022      	str	r2, [r4, #0]
 800414c:	780b      	ldrb	r3, [r1, #0]
 800414e:	f805 3b01 	strb.w	r3, [r5], #1
 8004152:	e7de      	b.n	8004112 <_scanf_i+0x10e>
 8004154:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004158:	4631      	mov	r1, r6
 800415a:	4650      	mov	r0, sl
 800415c:	4798      	blx	r3
 800415e:	2800      	cmp	r0, #0
 8004160:	d0df      	beq.n	8004122 <_scanf_i+0x11e>
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	05db      	lsls	r3, r3, #23
 8004166:	d50d      	bpl.n	8004184 <_scanf_i+0x180>
 8004168:	42bd      	cmp	r5, r7
 800416a:	d909      	bls.n	8004180 <_scanf_i+0x17c>
 800416c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004170:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004174:	4632      	mov	r2, r6
 8004176:	4650      	mov	r0, sl
 8004178:	4798      	blx	r3
 800417a:	f105 39ff 	add.w	r9, r5, #4294967295
 800417e:	464d      	mov	r5, r9
 8004180:	42bd      	cmp	r5, r7
 8004182:	d02d      	beq.n	80041e0 <_scanf_i+0x1dc>
 8004184:	6822      	ldr	r2, [r4, #0]
 8004186:	f012 0210 	ands.w	r2, r2, #16
 800418a:	d113      	bne.n	80041b4 <_scanf_i+0x1b0>
 800418c:	702a      	strb	r2, [r5, #0]
 800418e:	6863      	ldr	r3, [r4, #4]
 8004190:	9e01      	ldr	r6, [sp, #4]
 8004192:	4639      	mov	r1, r7
 8004194:	4650      	mov	r0, sl
 8004196:	47b0      	blx	r6
 8004198:	6821      	ldr	r1, [r4, #0]
 800419a:	f8d8 3000 	ldr.w	r3, [r8]
 800419e:	f011 0f20 	tst.w	r1, #32
 80041a2:	d013      	beq.n	80041cc <_scanf_i+0x1c8>
 80041a4:	1d1a      	adds	r2, r3, #4
 80041a6:	f8c8 2000 	str.w	r2, [r8]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6018      	str	r0, [r3, #0]
 80041ae:	68e3      	ldr	r3, [r4, #12]
 80041b0:	3301      	adds	r3, #1
 80041b2:	60e3      	str	r3, [r4, #12]
 80041b4:	1bed      	subs	r5, r5, r7
 80041b6:	44ab      	add	fp, r5
 80041b8:	6925      	ldr	r5, [r4, #16]
 80041ba:	445d      	add	r5, fp
 80041bc:	6125      	str	r5, [r4, #16]
 80041be:	2000      	movs	r0, #0
 80041c0:	b007      	add	sp, #28
 80041c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c6:	f04f 0b00 	mov.w	fp, #0
 80041ca:	e7ca      	b.n	8004162 <_scanf_i+0x15e>
 80041cc:	1d1a      	adds	r2, r3, #4
 80041ce:	f8c8 2000 	str.w	r2, [r8]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f011 0f01 	tst.w	r1, #1
 80041d8:	bf14      	ite	ne
 80041da:	8018      	strhne	r0, [r3, #0]
 80041dc:	6018      	streq	r0, [r3, #0]
 80041de:	e7e6      	b.n	80041ae <_scanf_i+0x1aa>
 80041e0:	2001      	movs	r0, #1
 80041e2:	e7ed      	b.n	80041c0 <_scanf_i+0x1bc>
 80041e4:	08004758 	.word	0x08004758
 80041e8:	08004451 	.word	0x08004451
 80041ec:	08004369 	.word	0x08004369
 80041f0:	080047c9 	.word	0x080047c9

080041f4 <__sccl>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	780b      	ldrb	r3, [r1, #0]
 80041f8:	4604      	mov	r4, r0
 80041fa:	2b5e      	cmp	r3, #94	; 0x5e
 80041fc:	bf0b      	itete	eq
 80041fe:	784b      	ldrbeq	r3, [r1, #1]
 8004200:	1c48      	addne	r0, r1, #1
 8004202:	1c88      	addeq	r0, r1, #2
 8004204:	2200      	movne	r2, #0
 8004206:	bf08      	it	eq
 8004208:	2201      	moveq	r2, #1
 800420a:	1e61      	subs	r1, r4, #1
 800420c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004210:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004214:	42a9      	cmp	r1, r5
 8004216:	d1fb      	bne.n	8004210 <__sccl+0x1c>
 8004218:	b90b      	cbnz	r3, 800421e <__sccl+0x2a>
 800421a:	3801      	subs	r0, #1
 800421c:	bd70      	pop	{r4, r5, r6, pc}
 800421e:	f082 0201 	eor.w	r2, r2, #1
 8004222:	54e2      	strb	r2, [r4, r3]
 8004224:	4605      	mov	r5, r0
 8004226:	4628      	mov	r0, r5
 8004228:	f810 1b01 	ldrb.w	r1, [r0], #1
 800422c:	292d      	cmp	r1, #45	; 0x2d
 800422e:	d006      	beq.n	800423e <__sccl+0x4a>
 8004230:	295d      	cmp	r1, #93	; 0x5d
 8004232:	d0f3      	beq.n	800421c <__sccl+0x28>
 8004234:	b909      	cbnz	r1, 800423a <__sccl+0x46>
 8004236:	4628      	mov	r0, r5
 8004238:	e7f0      	b.n	800421c <__sccl+0x28>
 800423a:	460b      	mov	r3, r1
 800423c:	e7f1      	b.n	8004222 <__sccl+0x2e>
 800423e:	786e      	ldrb	r6, [r5, #1]
 8004240:	2e5d      	cmp	r6, #93	; 0x5d
 8004242:	d0fa      	beq.n	800423a <__sccl+0x46>
 8004244:	42b3      	cmp	r3, r6
 8004246:	dcf8      	bgt.n	800423a <__sccl+0x46>
 8004248:	3502      	adds	r5, #2
 800424a:	4619      	mov	r1, r3
 800424c:	3101      	adds	r1, #1
 800424e:	428e      	cmp	r6, r1
 8004250:	5462      	strb	r2, [r4, r1]
 8004252:	dcfb      	bgt.n	800424c <__sccl+0x58>
 8004254:	1af1      	subs	r1, r6, r3
 8004256:	3901      	subs	r1, #1
 8004258:	1c58      	adds	r0, r3, #1
 800425a:	42b3      	cmp	r3, r6
 800425c:	bfa8      	it	ge
 800425e:	2100      	movge	r1, #0
 8004260:	1843      	adds	r3, r0, r1
 8004262:	e7e0      	b.n	8004226 <__sccl+0x32>

08004264 <_strtol_l.constprop.0>:
 8004264:	2b01      	cmp	r3, #1
 8004266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800426a:	d001      	beq.n	8004270 <_strtol_l.constprop.0+0xc>
 800426c:	2b24      	cmp	r3, #36	; 0x24
 800426e:	d906      	bls.n	800427e <_strtol_l.constprop.0+0x1a>
 8004270:	f7ff fc2e 	bl	8003ad0 <__errno>
 8004274:	2316      	movs	r3, #22
 8004276:	6003      	str	r3, [r0, #0]
 8004278:	2000      	movs	r0, #0
 800427a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004364 <_strtol_l.constprop.0+0x100>
 8004282:	460d      	mov	r5, r1
 8004284:	462e      	mov	r6, r5
 8004286:	f815 4b01 	ldrb.w	r4, [r5], #1
 800428a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800428e:	f017 0708 	ands.w	r7, r7, #8
 8004292:	d1f7      	bne.n	8004284 <_strtol_l.constprop.0+0x20>
 8004294:	2c2d      	cmp	r4, #45	; 0x2d
 8004296:	d132      	bne.n	80042fe <_strtol_l.constprop.0+0x9a>
 8004298:	782c      	ldrb	r4, [r5, #0]
 800429a:	2701      	movs	r7, #1
 800429c:	1cb5      	adds	r5, r6, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d05b      	beq.n	800435a <_strtol_l.constprop.0+0xf6>
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d109      	bne.n	80042ba <_strtol_l.constprop.0+0x56>
 80042a6:	2c30      	cmp	r4, #48	; 0x30
 80042a8:	d107      	bne.n	80042ba <_strtol_l.constprop.0+0x56>
 80042aa:	782c      	ldrb	r4, [r5, #0]
 80042ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80042b0:	2c58      	cmp	r4, #88	; 0x58
 80042b2:	d14d      	bne.n	8004350 <_strtol_l.constprop.0+0xec>
 80042b4:	786c      	ldrb	r4, [r5, #1]
 80042b6:	2310      	movs	r3, #16
 80042b8:	3502      	adds	r5, #2
 80042ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80042be:	f108 38ff 	add.w	r8, r8, #4294967295
 80042c2:	f04f 0c00 	mov.w	ip, #0
 80042c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80042ca:	4666      	mov	r6, ip
 80042cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80042d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80042d4:	f1be 0f09 	cmp.w	lr, #9
 80042d8:	d816      	bhi.n	8004308 <_strtol_l.constprop.0+0xa4>
 80042da:	4674      	mov	r4, lr
 80042dc:	42a3      	cmp	r3, r4
 80042de:	dd24      	ble.n	800432a <_strtol_l.constprop.0+0xc6>
 80042e0:	f1bc 0f00 	cmp.w	ip, #0
 80042e4:	db1e      	blt.n	8004324 <_strtol_l.constprop.0+0xc0>
 80042e6:	45b1      	cmp	r9, r6
 80042e8:	d31c      	bcc.n	8004324 <_strtol_l.constprop.0+0xc0>
 80042ea:	d101      	bne.n	80042f0 <_strtol_l.constprop.0+0x8c>
 80042ec:	45a2      	cmp	sl, r4
 80042ee:	db19      	blt.n	8004324 <_strtol_l.constprop.0+0xc0>
 80042f0:	fb06 4603 	mla	r6, r6, r3, r4
 80042f4:	f04f 0c01 	mov.w	ip, #1
 80042f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042fc:	e7e8      	b.n	80042d0 <_strtol_l.constprop.0+0x6c>
 80042fe:	2c2b      	cmp	r4, #43	; 0x2b
 8004300:	bf04      	itt	eq
 8004302:	782c      	ldrbeq	r4, [r5, #0]
 8004304:	1cb5      	addeq	r5, r6, #2
 8004306:	e7ca      	b.n	800429e <_strtol_l.constprop.0+0x3a>
 8004308:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800430c:	f1be 0f19 	cmp.w	lr, #25
 8004310:	d801      	bhi.n	8004316 <_strtol_l.constprop.0+0xb2>
 8004312:	3c37      	subs	r4, #55	; 0x37
 8004314:	e7e2      	b.n	80042dc <_strtol_l.constprop.0+0x78>
 8004316:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800431a:	f1be 0f19 	cmp.w	lr, #25
 800431e:	d804      	bhi.n	800432a <_strtol_l.constprop.0+0xc6>
 8004320:	3c57      	subs	r4, #87	; 0x57
 8004322:	e7db      	b.n	80042dc <_strtol_l.constprop.0+0x78>
 8004324:	f04f 3cff 	mov.w	ip, #4294967295
 8004328:	e7e6      	b.n	80042f8 <_strtol_l.constprop.0+0x94>
 800432a:	f1bc 0f00 	cmp.w	ip, #0
 800432e:	da05      	bge.n	800433c <_strtol_l.constprop.0+0xd8>
 8004330:	2322      	movs	r3, #34	; 0x22
 8004332:	6003      	str	r3, [r0, #0]
 8004334:	4646      	mov	r6, r8
 8004336:	b942      	cbnz	r2, 800434a <_strtol_l.constprop.0+0xe6>
 8004338:	4630      	mov	r0, r6
 800433a:	e79e      	b.n	800427a <_strtol_l.constprop.0+0x16>
 800433c:	b107      	cbz	r7, 8004340 <_strtol_l.constprop.0+0xdc>
 800433e:	4276      	negs	r6, r6
 8004340:	2a00      	cmp	r2, #0
 8004342:	d0f9      	beq.n	8004338 <_strtol_l.constprop.0+0xd4>
 8004344:	f1bc 0f00 	cmp.w	ip, #0
 8004348:	d000      	beq.n	800434c <_strtol_l.constprop.0+0xe8>
 800434a:	1e69      	subs	r1, r5, #1
 800434c:	6011      	str	r1, [r2, #0]
 800434e:	e7f3      	b.n	8004338 <_strtol_l.constprop.0+0xd4>
 8004350:	2430      	movs	r4, #48	; 0x30
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1b1      	bne.n	80042ba <_strtol_l.constprop.0+0x56>
 8004356:	2308      	movs	r3, #8
 8004358:	e7af      	b.n	80042ba <_strtol_l.constprop.0+0x56>
 800435a:	2c30      	cmp	r4, #48	; 0x30
 800435c:	d0a5      	beq.n	80042aa <_strtol_l.constprop.0+0x46>
 800435e:	230a      	movs	r3, #10
 8004360:	e7ab      	b.n	80042ba <_strtol_l.constprop.0+0x56>
 8004362:	bf00      	nop
 8004364:	080047cc 	.word	0x080047cc

08004368 <_strtol_r>:
 8004368:	f7ff bf7c 	b.w	8004264 <_strtol_l.constprop.0>

0800436c <_strtoul_l.constprop.0>:
 800436c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004370:	4f36      	ldr	r7, [pc, #216]	; (800444c <_strtoul_l.constprop.0+0xe0>)
 8004372:	4686      	mov	lr, r0
 8004374:	460d      	mov	r5, r1
 8004376:	4628      	mov	r0, r5
 8004378:	f815 4b01 	ldrb.w	r4, [r5], #1
 800437c:	5de6      	ldrb	r6, [r4, r7]
 800437e:	f016 0608 	ands.w	r6, r6, #8
 8004382:	d1f8      	bne.n	8004376 <_strtoul_l.constprop.0+0xa>
 8004384:	2c2d      	cmp	r4, #45	; 0x2d
 8004386:	d12f      	bne.n	80043e8 <_strtoul_l.constprop.0+0x7c>
 8004388:	782c      	ldrb	r4, [r5, #0]
 800438a:	2601      	movs	r6, #1
 800438c:	1c85      	adds	r5, r0, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d057      	beq.n	8004442 <_strtoul_l.constprop.0+0xd6>
 8004392:	2b10      	cmp	r3, #16
 8004394:	d109      	bne.n	80043aa <_strtoul_l.constprop.0+0x3e>
 8004396:	2c30      	cmp	r4, #48	; 0x30
 8004398:	d107      	bne.n	80043aa <_strtoul_l.constprop.0+0x3e>
 800439a:	7828      	ldrb	r0, [r5, #0]
 800439c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80043a0:	2858      	cmp	r0, #88	; 0x58
 80043a2:	d149      	bne.n	8004438 <_strtoul_l.constprop.0+0xcc>
 80043a4:	786c      	ldrb	r4, [r5, #1]
 80043a6:	2310      	movs	r3, #16
 80043a8:	3502      	adds	r5, #2
 80043aa:	f04f 38ff 	mov.w	r8, #4294967295
 80043ae:	2700      	movs	r7, #0
 80043b0:	fbb8 f8f3 	udiv	r8, r8, r3
 80043b4:	fb03 f908 	mul.w	r9, r3, r8
 80043b8:	ea6f 0909 	mvn.w	r9, r9
 80043bc:	4638      	mov	r0, r7
 80043be:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80043c2:	f1bc 0f09 	cmp.w	ip, #9
 80043c6:	d814      	bhi.n	80043f2 <_strtoul_l.constprop.0+0x86>
 80043c8:	4664      	mov	r4, ip
 80043ca:	42a3      	cmp	r3, r4
 80043cc:	dd22      	ble.n	8004414 <_strtoul_l.constprop.0+0xa8>
 80043ce:	2f00      	cmp	r7, #0
 80043d0:	db1d      	blt.n	800440e <_strtoul_l.constprop.0+0xa2>
 80043d2:	4580      	cmp	r8, r0
 80043d4:	d31b      	bcc.n	800440e <_strtoul_l.constprop.0+0xa2>
 80043d6:	d101      	bne.n	80043dc <_strtoul_l.constprop.0+0x70>
 80043d8:	45a1      	cmp	r9, r4
 80043da:	db18      	blt.n	800440e <_strtoul_l.constprop.0+0xa2>
 80043dc:	fb00 4003 	mla	r0, r0, r3, r4
 80043e0:	2701      	movs	r7, #1
 80043e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043e6:	e7ea      	b.n	80043be <_strtoul_l.constprop.0+0x52>
 80043e8:	2c2b      	cmp	r4, #43	; 0x2b
 80043ea:	bf04      	itt	eq
 80043ec:	782c      	ldrbeq	r4, [r5, #0]
 80043ee:	1c85      	addeq	r5, r0, #2
 80043f0:	e7cd      	b.n	800438e <_strtoul_l.constprop.0+0x22>
 80043f2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80043f6:	f1bc 0f19 	cmp.w	ip, #25
 80043fa:	d801      	bhi.n	8004400 <_strtoul_l.constprop.0+0x94>
 80043fc:	3c37      	subs	r4, #55	; 0x37
 80043fe:	e7e4      	b.n	80043ca <_strtoul_l.constprop.0+0x5e>
 8004400:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004404:	f1bc 0f19 	cmp.w	ip, #25
 8004408:	d804      	bhi.n	8004414 <_strtoul_l.constprop.0+0xa8>
 800440a:	3c57      	subs	r4, #87	; 0x57
 800440c:	e7dd      	b.n	80043ca <_strtoul_l.constprop.0+0x5e>
 800440e:	f04f 37ff 	mov.w	r7, #4294967295
 8004412:	e7e6      	b.n	80043e2 <_strtoul_l.constprop.0+0x76>
 8004414:	2f00      	cmp	r7, #0
 8004416:	da07      	bge.n	8004428 <_strtoul_l.constprop.0+0xbc>
 8004418:	2322      	movs	r3, #34	; 0x22
 800441a:	f8ce 3000 	str.w	r3, [lr]
 800441e:	f04f 30ff 	mov.w	r0, #4294967295
 8004422:	b932      	cbnz	r2, 8004432 <_strtoul_l.constprop.0+0xc6>
 8004424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004428:	b106      	cbz	r6, 800442c <_strtoul_l.constprop.0+0xc0>
 800442a:	4240      	negs	r0, r0
 800442c:	2a00      	cmp	r2, #0
 800442e:	d0f9      	beq.n	8004424 <_strtoul_l.constprop.0+0xb8>
 8004430:	b107      	cbz	r7, 8004434 <_strtoul_l.constprop.0+0xc8>
 8004432:	1e69      	subs	r1, r5, #1
 8004434:	6011      	str	r1, [r2, #0]
 8004436:	e7f5      	b.n	8004424 <_strtoul_l.constprop.0+0xb8>
 8004438:	2430      	movs	r4, #48	; 0x30
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1b5      	bne.n	80043aa <_strtoul_l.constprop.0+0x3e>
 800443e:	2308      	movs	r3, #8
 8004440:	e7b3      	b.n	80043aa <_strtoul_l.constprop.0+0x3e>
 8004442:	2c30      	cmp	r4, #48	; 0x30
 8004444:	d0a9      	beq.n	800439a <_strtoul_l.constprop.0+0x2e>
 8004446:	230a      	movs	r3, #10
 8004448:	e7af      	b.n	80043aa <_strtoul_l.constprop.0+0x3e>
 800444a:	bf00      	nop
 800444c:	080047cc 	.word	0x080047cc

08004450 <_strtoul_r>:
 8004450:	f7ff bf8c 	b.w	800436c <_strtoul_l.constprop.0>

08004454 <__submore>:
 8004454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004458:	460c      	mov	r4, r1
 800445a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800445c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004460:	4299      	cmp	r1, r3
 8004462:	d11d      	bne.n	80044a0 <__submore+0x4c>
 8004464:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004468:	f000 f89c 	bl	80045a4 <_malloc_r>
 800446c:	b918      	cbnz	r0, 8004476 <__submore+0x22>
 800446e:	f04f 30ff 	mov.w	r0, #4294967295
 8004472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800447a:	63a3      	str	r3, [r4, #56]	; 0x38
 800447c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004480:	6360      	str	r0, [r4, #52]	; 0x34
 8004482:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004486:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800448a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800448e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004492:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004496:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800449a:	6020      	str	r0, [r4, #0]
 800449c:	2000      	movs	r0, #0
 800449e:	e7e8      	b.n	8004472 <__submore+0x1e>
 80044a0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80044a2:	0077      	lsls	r7, r6, #1
 80044a4:	463a      	mov	r2, r7
 80044a6:	f000 f8f1 	bl	800468c <_realloc_r>
 80044aa:	4605      	mov	r5, r0
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d0de      	beq.n	800446e <__submore+0x1a>
 80044b0:	eb00 0806 	add.w	r8, r0, r6
 80044b4:	4601      	mov	r1, r0
 80044b6:	4632      	mov	r2, r6
 80044b8:	4640      	mov	r0, r8
 80044ba:	f7ff fb33 	bl	8003b24 <memcpy>
 80044be:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80044c2:	f8c4 8000 	str.w	r8, [r4]
 80044c6:	e7e9      	b.n	800449c <__submore+0x48>

080044c8 <__retarget_lock_acquire_recursive>:
 80044c8:	4770      	bx	lr

080044ca <__retarget_lock_release_recursive>:
 80044ca:	4770      	bx	lr

080044cc <_free_r>:
 80044cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044ce:	2900      	cmp	r1, #0
 80044d0:	d044      	beq.n	800455c <_free_r+0x90>
 80044d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d6:	9001      	str	r0, [sp, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f1a1 0404 	sub.w	r4, r1, #4
 80044de:	bfb8      	it	lt
 80044e0:	18e4      	addlt	r4, r4, r3
 80044e2:	f000 f913 	bl	800470c <__malloc_lock>
 80044e6:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <_free_r+0x94>)
 80044e8:	9801      	ldr	r0, [sp, #4]
 80044ea:	6813      	ldr	r3, [r2, #0]
 80044ec:	b933      	cbnz	r3, 80044fc <_free_r+0x30>
 80044ee:	6063      	str	r3, [r4, #4]
 80044f0:	6014      	str	r4, [r2, #0]
 80044f2:	b003      	add	sp, #12
 80044f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044f8:	f000 b90e 	b.w	8004718 <__malloc_unlock>
 80044fc:	42a3      	cmp	r3, r4
 80044fe:	d908      	bls.n	8004512 <_free_r+0x46>
 8004500:	6825      	ldr	r5, [r4, #0]
 8004502:	1961      	adds	r1, r4, r5
 8004504:	428b      	cmp	r3, r1
 8004506:	bf01      	itttt	eq
 8004508:	6819      	ldreq	r1, [r3, #0]
 800450a:	685b      	ldreq	r3, [r3, #4]
 800450c:	1949      	addeq	r1, r1, r5
 800450e:	6021      	streq	r1, [r4, #0]
 8004510:	e7ed      	b.n	80044ee <_free_r+0x22>
 8004512:	461a      	mov	r2, r3
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	b10b      	cbz	r3, 800451c <_free_r+0x50>
 8004518:	42a3      	cmp	r3, r4
 800451a:	d9fa      	bls.n	8004512 <_free_r+0x46>
 800451c:	6811      	ldr	r1, [r2, #0]
 800451e:	1855      	adds	r5, r2, r1
 8004520:	42a5      	cmp	r5, r4
 8004522:	d10b      	bne.n	800453c <_free_r+0x70>
 8004524:	6824      	ldr	r4, [r4, #0]
 8004526:	4421      	add	r1, r4
 8004528:	1854      	adds	r4, r2, r1
 800452a:	42a3      	cmp	r3, r4
 800452c:	6011      	str	r1, [r2, #0]
 800452e:	d1e0      	bne.n	80044f2 <_free_r+0x26>
 8004530:	681c      	ldr	r4, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	6053      	str	r3, [r2, #4]
 8004536:	4421      	add	r1, r4
 8004538:	6011      	str	r1, [r2, #0]
 800453a:	e7da      	b.n	80044f2 <_free_r+0x26>
 800453c:	d902      	bls.n	8004544 <_free_r+0x78>
 800453e:	230c      	movs	r3, #12
 8004540:	6003      	str	r3, [r0, #0]
 8004542:	e7d6      	b.n	80044f2 <_free_r+0x26>
 8004544:	6825      	ldr	r5, [r4, #0]
 8004546:	1961      	adds	r1, r4, r5
 8004548:	428b      	cmp	r3, r1
 800454a:	bf04      	itt	eq
 800454c:	6819      	ldreq	r1, [r3, #0]
 800454e:	685b      	ldreq	r3, [r3, #4]
 8004550:	6063      	str	r3, [r4, #4]
 8004552:	bf04      	itt	eq
 8004554:	1949      	addeq	r1, r1, r5
 8004556:	6021      	streq	r1, [r4, #0]
 8004558:	6054      	str	r4, [r2, #4]
 800455a:	e7ca      	b.n	80044f2 <_free_r+0x26>
 800455c:	b003      	add	sp, #12
 800455e:	bd30      	pop	{r4, r5, pc}
 8004560:	20000160 	.word	0x20000160

08004564 <sbrk_aligned>:
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	4e0e      	ldr	r6, [pc, #56]	; (80045a0 <sbrk_aligned+0x3c>)
 8004568:	460c      	mov	r4, r1
 800456a:	6831      	ldr	r1, [r6, #0]
 800456c:	4605      	mov	r5, r0
 800456e:	b911      	cbnz	r1, 8004576 <sbrk_aligned+0x12>
 8004570:	f000 f8bc 	bl	80046ec <_sbrk_r>
 8004574:	6030      	str	r0, [r6, #0]
 8004576:	4621      	mov	r1, r4
 8004578:	4628      	mov	r0, r5
 800457a:	f000 f8b7 	bl	80046ec <_sbrk_r>
 800457e:	1c43      	adds	r3, r0, #1
 8004580:	d00a      	beq.n	8004598 <sbrk_aligned+0x34>
 8004582:	1cc4      	adds	r4, r0, #3
 8004584:	f024 0403 	bic.w	r4, r4, #3
 8004588:	42a0      	cmp	r0, r4
 800458a:	d007      	beq.n	800459c <sbrk_aligned+0x38>
 800458c:	1a21      	subs	r1, r4, r0
 800458e:	4628      	mov	r0, r5
 8004590:	f000 f8ac 	bl	80046ec <_sbrk_r>
 8004594:	3001      	adds	r0, #1
 8004596:	d101      	bne.n	800459c <sbrk_aligned+0x38>
 8004598:	f04f 34ff 	mov.w	r4, #4294967295
 800459c:	4620      	mov	r0, r4
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	20000164 	.word	0x20000164

080045a4 <_malloc_r>:
 80045a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a8:	1ccd      	adds	r5, r1, #3
 80045aa:	f025 0503 	bic.w	r5, r5, #3
 80045ae:	3508      	adds	r5, #8
 80045b0:	2d0c      	cmp	r5, #12
 80045b2:	bf38      	it	cc
 80045b4:	250c      	movcc	r5, #12
 80045b6:	2d00      	cmp	r5, #0
 80045b8:	4607      	mov	r7, r0
 80045ba:	db01      	blt.n	80045c0 <_malloc_r+0x1c>
 80045bc:	42a9      	cmp	r1, r5
 80045be:	d905      	bls.n	80045cc <_malloc_r+0x28>
 80045c0:	230c      	movs	r3, #12
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	2600      	movs	r6, #0
 80045c6:	4630      	mov	r0, r6
 80045c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045cc:	4e2e      	ldr	r6, [pc, #184]	; (8004688 <_malloc_r+0xe4>)
 80045ce:	f000 f89d 	bl	800470c <__malloc_lock>
 80045d2:	6833      	ldr	r3, [r6, #0]
 80045d4:	461c      	mov	r4, r3
 80045d6:	bb34      	cbnz	r4, 8004626 <_malloc_r+0x82>
 80045d8:	4629      	mov	r1, r5
 80045da:	4638      	mov	r0, r7
 80045dc:	f7ff ffc2 	bl	8004564 <sbrk_aligned>
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	4604      	mov	r4, r0
 80045e4:	d14d      	bne.n	8004682 <_malloc_r+0xde>
 80045e6:	6834      	ldr	r4, [r6, #0]
 80045e8:	4626      	mov	r6, r4
 80045ea:	2e00      	cmp	r6, #0
 80045ec:	d140      	bne.n	8004670 <_malloc_r+0xcc>
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	4631      	mov	r1, r6
 80045f2:	4638      	mov	r0, r7
 80045f4:	eb04 0803 	add.w	r8, r4, r3
 80045f8:	f000 f878 	bl	80046ec <_sbrk_r>
 80045fc:	4580      	cmp	r8, r0
 80045fe:	d13a      	bne.n	8004676 <_malloc_r+0xd2>
 8004600:	6821      	ldr	r1, [r4, #0]
 8004602:	3503      	adds	r5, #3
 8004604:	1a6d      	subs	r5, r5, r1
 8004606:	f025 0503 	bic.w	r5, r5, #3
 800460a:	3508      	adds	r5, #8
 800460c:	2d0c      	cmp	r5, #12
 800460e:	bf38      	it	cc
 8004610:	250c      	movcc	r5, #12
 8004612:	4629      	mov	r1, r5
 8004614:	4638      	mov	r0, r7
 8004616:	f7ff ffa5 	bl	8004564 <sbrk_aligned>
 800461a:	3001      	adds	r0, #1
 800461c:	d02b      	beq.n	8004676 <_malloc_r+0xd2>
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	442b      	add	r3, r5
 8004622:	6023      	str	r3, [r4, #0]
 8004624:	e00e      	b.n	8004644 <_malloc_r+0xa0>
 8004626:	6822      	ldr	r2, [r4, #0]
 8004628:	1b52      	subs	r2, r2, r5
 800462a:	d41e      	bmi.n	800466a <_malloc_r+0xc6>
 800462c:	2a0b      	cmp	r2, #11
 800462e:	d916      	bls.n	800465e <_malloc_r+0xba>
 8004630:	1961      	adds	r1, r4, r5
 8004632:	42a3      	cmp	r3, r4
 8004634:	6025      	str	r5, [r4, #0]
 8004636:	bf18      	it	ne
 8004638:	6059      	strne	r1, [r3, #4]
 800463a:	6863      	ldr	r3, [r4, #4]
 800463c:	bf08      	it	eq
 800463e:	6031      	streq	r1, [r6, #0]
 8004640:	5162      	str	r2, [r4, r5]
 8004642:	604b      	str	r3, [r1, #4]
 8004644:	4638      	mov	r0, r7
 8004646:	f104 060b 	add.w	r6, r4, #11
 800464a:	f000 f865 	bl	8004718 <__malloc_unlock>
 800464e:	f026 0607 	bic.w	r6, r6, #7
 8004652:	1d23      	adds	r3, r4, #4
 8004654:	1af2      	subs	r2, r6, r3
 8004656:	d0b6      	beq.n	80045c6 <_malloc_r+0x22>
 8004658:	1b9b      	subs	r3, r3, r6
 800465a:	50a3      	str	r3, [r4, r2]
 800465c:	e7b3      	b.n	80045c6 <_malloc_r+0x22>
 800465e:	6862      	ldr	r2, [r4, #4]
 8004660:	42a3      	cmp	r3, r4
 8004662:	bf0c      	ite	eq
 8004664:	6032      	streq	r2, [r6, #0]
 8004666:	605a      	strne	r2, [r3, #4]
 8004668:	e7ec      	b.n	8004644 <_malloc_r+0xa0>
 800466a:	4623      	mov	r3, r4
 800466c:	6864      	ldr	r4, [r4, #4]
 800466e:	e7b2      	b.n	80045d6 <_malloc_r+0x32>
 8004670:	4634      	mov	r4, r6
 8004672:	6876      	ldr	r6, [r6, #4]
 8004674:	e7b9      	b.n	80045ea <_malloc_r+0x46>
 8004676:	230c      	movs	r3, #12
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	4638      	mov	r0, r7
 800467c:	f000 f84c 	bl	8004718 <__malloc_unlock>
 8004680:	e7a1      	b.n	80045c6 <_malloc_r+0x22>
 8004682:	6025      	str	r5, [r4, #0]
 8004684:	e7de      	b.n	8004644 <_malloc_r+0xa0>
 8004686:	bf00      	nop
 8004688:	20000160 	.word	0x20000160

0800468c <_realloc_r>:
 800468c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004690:	4680      	mov	r8, r0
 8004692:	4614      	mov	r4, r2
 8004694:	460e      	mov	r6, r1
 8004696:	b921      	cbnz	r1, 80046a2 <_realloc_r+0x16>
 8004698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800469c:	4611      	mov	r1, r2
 800469e:	f7ff bf81 	b.w	80045a4 <_malloc_r>
 80046a2:	b92a      	cbnz	r2, 80046b0 <_realloc_r+0x24>
 80046a4:	f7ff ff12 	bl	80044cc <_free_r>
 80046a8:	4625      	mov	r5, r4
 80046aa:	4628      	mov	r0, r5
 80046ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046b0:	f000 f838 	bl	8004724 <_malloc_usable_size_r>
 80046b4:	4284      	cmp	r4, r0
 80046b6:	4607      	mov	r7, r0
 80046b8:	d802      	bhi.n	80046c0 <_realloc_r+0x34>
 80046ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046be:	d812      	bhi.n	80046e6 <_realloc_r+0x5a>
 80046c0:	4621      	mov	r1, r4
 80046c2:	4640      	mov	r0, r8
 80046c4:	f7ff ff6e 	bl	80045a4 <_malloc_r>
 80046c8:	4605      	mov	r5, r0
 80046ca:	2800      	cmp	r0, #0
 80046cc:	d0ed      	beq.n	80046aa <_realloc_r+0x1e>
 80046ce:	42bc      	cmp	r4, r7
 80046d0:	4622      	mov	r2, r4
 80046d2:	4631      	mov	r1, r6
 80046d4:	bf28      	it	cs
 80046d6:	463a      	movcs	r2, r7
 80046d8:	f7ff fa24 	bl	8003b24 <memcpy>
 80046dc:	4631      	mov	r1, r6
 80046de:	4640      	mov	r0, r8
 80046e0:	f7ff fef4 	bl	80044cc <_free_r>
 80046e4:	e7e1      	b.n	80046aa <_realloc_r+0x1e>
 80046e6:	4635      	mov	r5, r6
 80046e8:	e7df      	b.n	80046aa <_realloc_r+0x1e>
	...

080046ec <_sbrk_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4d06      	ldr	r5, [pc, #24]	; (8004708 <_sbrk_r+0x1c>)
 80046f0:	2300      	movs	r3, #0
 80046f2:	4604      	mov	r4, r0
 80046f4:	4608      	mov	r0, r1
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	f7fc fc3a 	bl	8000f70 <_sbrk>
 80046fc:	1c43      	adds	r3, r0, #1
 80046fe:	d102      	bne.n	8004706 <_sbrk_r+0x1a>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	b103      	cbz	r3, 8004706 <_sbrk_r+0x1a>
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	bd38      	pop	{r3, r4, r5, pc}
 8004708:	20000158 	.word	0x20000158

0800470c <__malloc_lock>:
 800470c:	4801      	ldr	r0, [pc, #4]	; (8004714 <__malloc_lock+0x8>)
 800470e:	f7ff bedb 	b.w	80044c8 <__retarget_lock_acquire_recursive>
 8004712:	bf00      	nop
 8004714:	2000015c 	.word	0x2000015c

08004718 <__malloc_unlock>:
 8004718:	4801      	ldr	r0, [pc, #4]	; (8004720 <__malloc_unlock+0x8>)
 800471a:	f7ff bed6 	b.w	80044ca <__retarget_lock_release_recursive>
 800471e:	bf00      	nop
 8004720:	2000015c 	.word	0x2000015c

08004724 <_malloc_usable_size_r>:
 8004724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004728:	1f18      	subs	r0, r3, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	bfbc      	itt	lt
 800472e:	580b      	ldrlt	r3, [r1, r0]
 8004730:	18c0      	addlt	r0, r0, r3
 8004732:	4770      	bx	lr

08004734 <_init>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr

08004740 <_fini>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	bf00      	nop
 8004744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004746:	bc08      	pop	{r3}
 8004748:	469e      	mov	lr, r3
 800474a:	4770      	bx	lr
